{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# DataBoard - Dashboard Management System\n\n## Overview\n\nDataBoard is a full-stack dashboard management application that enables users to create, configure, and visualize data from various sources. The system provides a comprehensive platform for building interactive dashboards with support for multiple data source types including APIs, web scraping, and databases. Users can create custom visualizations, manage data sources, and control access through role-based authentication.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and modern development\n- **UI Library**: Shadcn/ui components built on Radix UI primitives for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming and responsive design\n- **State Management**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for REST API endpoints\n- **Language**: TypeScript for type safety across the entire stack\n- **Authentication**: Session-based authentication with bcrypt for password hashing\n- **API Design**: RESTful endpoints with consistent error handling and logging middleware\n- **Development**: Hot module replacement and automatic server restart during development\n\n### Database Architecture\n- **ORM**: Drizzle ORM for type-safe database interactions and schema management\n- **Database**: PostgreSQL with Neon serverless for scalable cloud hosting\n- **Schema**: Well-defined relational schema with proper foreign key constraints\n- **Migrations**: Automated schema migrations through Drizzle Kit\n\n### Data Source Integration\n- **Multiple Types**: Support for API endpoints, web scraping, and direct database connections\n- **Configuration**: JSON-based configuration storage for flexible data source setup\n- **Real-time**: Configurable refresh intervals for automatic data updates\n- **Testing**: Built-in data source connectivity testing and validation\n\n### Authentication & Authorization\n- **Multi-method**: Support for local authentication with plans for LDAP integration\n- **Role-based**: Admin and standard user roles with appropriate access controls\n- **Session Management**: Secure session handling with configurable timeouts\n- **Security**: Password hashing, secure cookies, and CSRF protection\n\n### Visualization System\n- **Chart Types**: Support for tables, bar charts, line charts, and other visualization types\n- **Interactive Canvas**: Drag-and-drop dashboard canvas with grid snapping\n- **Responsive**: Charts and components adapt to different screen sizes\n- **Real-time**: Live data updates with configurable refresh intervals\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL database hosting with WebSocket support\n- **Express Session**: Session management with memory store for development\n- **Bcrypt**: Password hashing and authentication security\n\n### UI & Visualization\n- **Radix UI**: Comprehensive set of accessible UI primitives and components\n- **Recharts**: React charting library for data visualization components\n- **Lucide React**: Icon library for consistent iconography throughout the application\n- **Tailwind CSS**: Utility-first CSS framework for responsive styling\n\n### Development & Build Tools\n- **Vite**: Fast build tool with hot module replacement and TypeScript support\n- **TypeScript**: Type checking and enhanced development experience\n- **Drizzle Kit**: Database schema management and migration tools\n- **TanStack React Query**: Server state management and data fetching\n- **Wouter**: Lightweight routing solution for single-page application navigation\n\n### Optional Integrations\n- **LDAP Support**: Planned integration for enterprise authentication (not yet implemented)\n- **WebSocket**: Real-time updates capability (infrastructure in place)\n- **External APIs**: Flexible configuration system for connecting to various data sources","size_bytes":4168},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport ldap from \"ldapjs\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport async function authenticateUser(identifier: string, password: string): Promise<User | null> {\n  // Try to find user by username or email\n  let user = await storage.getUserByUsername(identifier);\n  if (!user) {\n    user = await storage.getUserByEmail(identifier);\n  }\n\n  if (!user || !user.isActive) {\n    return null;\n  }\n\n  // For local authentication, verify password\n  if (user.authMethod === \"local\") {\n    if (!user.password) {\n      console.error(\"Local user missing password hash\");\n      return null;\n    }\n    const isValid = await comparePassword(password, user.password);\n    if (!isValid) {\n      return null;\n    }\n  } else if (user.authMethod === \"ldap\") {\n    // LDAP users should have null password since they authenticate via LDAP\n    // Use the username from the user record for LDAP authentication\n    const isValid = await authenticateLDAP(user.username, password);\n    if (!isValid) {\n      return null;\n    }\n  }\n\n  // Update last login\n  await storage.updateUser(user.id, { lastLogin: new Date() });\n  \n  return user;\n}\n\ninterface LDAPConfig {\n  url: string;\n  baseDN: string;\n  bindDN?: string;\n  bindCredentials?: string;\n  searchFilter: string;\n  tlsOptions?: {\n    rejectUnauthorized: boolean;\n  };\n}\n\nexport async function authenticateLDAP(username: string, password: string): Promise<boolean> {\n  try {\n    // Get LDAP configuration from settings\n    const ldapSettings = await storage.getLdapSettings();\n    if (!ldapSettings || !ldapSettings.enabled) {\n      console.error(\"LDAP configuration not found or disabled\");\n      return false;\n    }\n\n    const config = {\n      url: ldapSettings.url,\n      baseDN: ldapSettings.baseDN,\n      bindDN: ldapSettings.bindDN,\n      bindCredentials: ldapSettings.bindCredentials,\n      searchFilter: ldapSettings.searchFilter,\n      tlsOptions: {\n        rejectUnauthorized: ldapSettings.tlsRejectUnauthorized,\n      },\n    };\n    const client = ldap.createClient({\n      url: config.url,\n      tlsOptions: config.tlsOptions || { rejectUnauthorized: false },\n    });\n\n    return new Promise((resolve) => {\n      // Handle client connection errors to prevent server crash\n      client.on('error', (err) => {\n        console.error(\"LDAP client connection error:\", err.message || err);\n        resolve(false);\n      });\n\n      // Set a timeout for the connection attempt\n      const timeout = setTimeout(() => {\n        console.error(\"LDAP connection timeout\");\n        client.unbind();\n        resolve(false);\n      }, 5000); // 5 second timeout\n\n      // First bind with service account if provided, otherwise anonymous\n      const bindDN = config.bindDN || \"\";\n      const bindCredentials = config.bindCredentials || \"\";\n\n      client.bind(bindDN, bindCredentials, (bindErr) => {\n        clearTimeout(timeout);\n        if (bindErr) {\n          console.error(\"LDAP bind error:\", bindErr);\n          client.unbind();\n          resolve(false);\n          return;\n        }\n\n        // Search for the user\n        const searchFilter = config.searchFilter.replace(\"{username}\", username);\n        client.search(config.baseDN, {\n          filter: searchFilter,\n          scope: \"sub\",\n        }, (searchErr, res) => {\n          if (searchErr) {\n            console.error(\"LDAP search error:\", searchErr);\n            client.unbind();\n            resolve(false);\n            return;\n          }\n\n          let userDN: string | null = null;\n\n          res.on(\"searchEntry\", (entry) => {\n            userDN = entry.pojo.objectName || null;\n          });\n\n          res.on(\"end\", () => {\n            if (!userDN) {\n              console.error(\"User not found in LDAP\");\n              client.unbind();\n              resolve(false);\n              return;\n            }\n\n            // Try to bind with user credentials\n            client.bind(userDN, password, (authErr) => {\n              client.unbind();\n              if (authErr) {\n                console.error(\"LDAP authentication failed:\", authErr);\n                resolve(false);\n              } else {\n                resolve(true);\n              }\n            });\n          });\n\n          res.on(\"error\", (err) => {\n            console.error(\"LDAP search result error:\", err);\n            client.unbind();\n            resolve(false);\n          });\n        });\n      });\n    });\n  } catch (error) {\n    console.error(\"LDAP authentication error:\", error);\n    return false;\n  }\n}\n\nexport async function createDefaultAdmin(): Promise<void> {\n  const existingAdmin = await storage.getUserByEmail(\"admin@example.com\");\n  if (existingAdmin) {\n    return;\n  }\n\n  const hashedPassword = await hashPassword(\"admin123\");\n  await storage.createUser({\n    username: \"admin\",\n    email: \"admin@example.com\",\n    password: hashedPassword,\n    role: \"admin\",\n    authMethod: \"local\",\n  });\n}\n\nexport async function createTestLDAPConfig(): Promise<void> {\n  const existingConfig = await storage.getLdapSettings();\n  if (existingConfig) {\n    return;\n  }\n\n  // Create test LDAP configuration\n  await storage.createLdapSettings({\n    url: \"ldap://localhost:389\",\n    baseDN: \"dc=example,dc=com\",\n    bindDN: \"cn=admin,dc=example,dc=com\",\n    bindCredentials: \"admin\",\n    searchFilter: \"(uid={username})\",\n    tlsRejectUnauthorized: false,\n    enabled: false, // Default to disabled for security\n  });\n}\n\nexport async function searchLDAPUser(username: string): Promise<any | null> {\n  try {\n    // Get LDAP configuration from settings\n    const ldapSettings = await storage.getLdapSettings();\n    if (!ldapSettings || !ldapSettings.enabled) {\n      console.error(\"LDAP configuration not found or disabled\");\n      return null;\n    }\n\n    const config = {\n      url: ldapSettings.url,\n      baseDN: ldapSettings.baseDN,\n      bindDN: ldapSettings.bindDN,\n      bindCredentials: ldapSettings.bindCredentials,\n      searchFilter: ldapSettings.searchFilter,\n      tlsOptions: {\n        rejectUnauthorized: ldapSettings.tlsRejectUnauthorized,\n      },\n    };\n    console.log(`LDAP search for user: ${username}`);\n    console.log(`LDAP config - URL: ${config.url}, baseDN: ${config.baseDN}, searchFilter: ${config.searchFilter}`);\n    \n    const client = ldap.createClient({\n      url: config.url,\n      tlsOptions: config.tlsOptions || { rejectUnauthorized: false },\n    });\n\n    return new Promise((resolve) => {\n      // Handle client connection errors to prevent server crash\n      client.on('error', (err) => {\n        console.error(\"LDAP client connection error:\", err.message || err);\n        resolve(null);\n      });\n\n      // Set a timeout for the connection attempt\n      const timeout = setTimeout(() => {\n        console.error(\"LDAP connection timeout\");\n        client.unbind();\n        resolve(null);\n      }, 5000); // 5 second timeout\n\n      // First bind with service account if provided, otherwise anonymous\n      const bindDN = config.bindDN || \"\";\n      const bindCredentials = config.bindCredentials || \"\";\n\n      console.log(`Attempting LDAP bind with DN: ${bindDN}`);\n      client.bind(bindDN, bindCredentials, (bindErr) => {\n        clearTimeout(timeout);\n        if (bindErr) {\n          console.error(\"LDAP bind error:\", bindErr.message || bindErr);\n          client.unbind();\n          resolve(null);\n          return;\n        }\n\n        console.log(\"LDAP bind successful\");\n        \n        // Search for the user\n        const searchFilter = config.searchFilter.replace(\"{username}\", username);\n        console.log(`Searching with filter: ${searchFilter} in baseDN: ${config.baseDN}`);\n        \n        client.search(config.baseDN, {\n          filter: searchFilter,\n          scope: \"sub\",\n        }, (searchErr, res) => {\n          if (searchErr) {\n            console.error(\"LDAP search error:\", searchErr.message || searchErr);\n            client.unbind();\n            resolve(null);\n            return;\n          }\n\n          let userInfo: any = null;\n          let entryCount = 0;\n\n          res.on(\"searchEntry\", (entry) => {\n            entryCount++;\n            console.log(`Found LDAP entry ${entryCount}: ${entry.pojo.objectName}`);\n            \n            const userData = entry.pojo;\n            const attributes: any = {};\n            \n            // Parse LDAP attributes into a more accessible format\n            if (userData.attributes) {\n              console.log(\"Available attributes:\", Object.keys(userData.attributes));\n              for (const [key, values] of Object.entries(userData.attributes)) {\n                attributes[key] = Array.isArray(values) ? values[0] : values;\n              }\n            }\n            \n            userInfo = {\n              username: attributes.uid || attributes.sAMAccountName || username,\n              email: attributes.mail || attributes.email || `${username}@example.com`,\n              fullName: attributes.cn || attributes.displayName || username,\n              dn: userData.objectName,\n            };\n            \n            console.log(\"Parsed user info:\", userInfo);\n          });\n\n          res.on(\"end\", () => {\n            console.log(`LDAP search completed. Found ${entryCount} entries.`);\n            client.unbind();\n            resolve(userInfo);\n          });\n\n          res.on(\"error\", (err) => {\n            console.error(\"LDAP search result error:\", err.message || err);\n            client.unbind();\n            resolve(null);\n          });\n        });\n      });\n    });\n  } catch (error) {\n    console.error(\"LDAP search error:\", error);\n    return null;\n  }\n}\n\nexport async function createTestLDAPUser(): Promise<void> {\n  const existingUser = await storage.getUserByUsername(\"testuser\");\n  if (existingUser) {\n    return;\n  }\n\n  // Create a test LDAP user (no password needed as it's authenticated via LDAP)\n  await storage.createUser({\n    username: \"testuser\",\n    email: \"testuser@example.com\",\n    password: null,\n    role: \"standard\",\n    authMethod: \"ldap\",\n  });\n}\n\nexport async function testLDAPConnection(config: LDAPConfig, username: string, password: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    const client = ldap.createClient({\n      url: config.url,\n      tlsOptions: config.tlsOptions || { rejectUnauthorized: false },\n    });\n\n    return new Promise((resolve) => {\n      // Handle client connection errors to prevent server crash\n      client.on('error', (err) => {\n        console.error(\"LDAP client connection error:\", err.message || err);\n        resolve({ success: false, error: `Connection failed: ${err.message || err}` });\n      });\n\n      // Set a timeout for the connection attempt\n      const timeout = setTimeout(() => {\n        console.error(\"LDAP connection timeout\");\n        client.unbind();\n        resolve({ success: false, error: \"Connection timeout after 5 seconds\" });\n      }, 5000); // 5 second timeout\n\n      // First bind with service account if provided, otherwise anonymous\n      const bindDN = config.bindDN || \"\";\n      const bindCredentials = config.bindCredentials || \"\";\n\n      client.bind(bindDN, bindCredentials, (bindErr) => {\n        clearTimeout(timeout);\n        if (bindErr) {\n          console.error(\"LDAP bind error:\", bindErr);\n          client.unbind();\n          resolve({ success: false, error: `Authentication failed: ${bindErr.message || bindErr}` });\n          return;\n        }\n\n        // If bind was successful, the LDAP connection is working\n        console.log(\"LDAP bind successful - connection test passed\");\n        client.unbind();\n        resolve({ success: true });\n      });\n    });\n  } catch (error) {\n    console.error(\"LDAP authentication error:\", error);\n    return { success: false, error: `Configuration error: ${error}` };\n  }\n}\n","size_bytes":12032},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });","size_bytes":378},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authenticateUser, createDefaultAdmin, createTestLDAPConfig, createTestLDAPUser, searchLDAPUser, hashPassword, authenticateLDAP, testLDAPConnection } from \"./auth\";\nimport { insertUserSchema, insertDashboardSchema, insertDataSourceSchema, insertDashboardCardSchema, insertSettingSchema, insertPasswordResetTokenSchema } from \"@shared/schema\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\nimport { nanoid } from \"nanoid\";\nimport { sendTestEmail, sendPasswordResetEmail } from \"./mail\";\n\nconst MemoryStoreSession = MemoryStore(session);\n\n// Extend session type to include user\ndeclare module \"express-session\" {\n  interface SessionData {\n    user?: {\n      id: string;\n      username: string;\n      email: string;\n      role: string;\n    };\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize default admin user and test LDAP configuration\n  await createDefaultAdmin();\n  await createTestLDAPConfig();\n\n  // Session configuration\n  app.use(session({\n    secret: process.env.SESSION_SECRET || \"development-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    store: new MemoryStoreSession({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    }),\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  }));\n\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session?.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  const requireAdmin = (req: any, res: any, next: any) => {\n    if (!req.session?.user || req.session.user.role !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    next();\n  };\n\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { identifier, password } = req.body;\n      const user = await authenticateUser(identifier, password);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.user = { id: user.id, username: user.username, email: user.email, role: user.role };\n      res.json({ user: req.session.user });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", (req, res) => {\n    if (req.session?.user) {\n      res.json({ user: req.session.user });\n    } else {\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // Password reset routes\n  app.post(\"/api/auth/password-reset-request\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      // Check if user exists\n      const user = await storage.getUserByEmail(email);\n      \n      // Always return success to prevent email enumeration\n      if (!user) {\n        return res.json({ message: \"Password reset email sent if account exists\" });\n      }\n\n      // Generate token and set expiration (30 minutes)\n      const token = nanoid(32);\n      const expiresAt = new Date();\n      expiresAt.setMinutes(expiresAt.getMinutes() + 30);\n\n      // Clean up expired tokens first\n      await storage.cleanupExpiredTokens();\n\n      // Create password reset token\n      await storage.createPasswordResetToken({\n        userId: user.id,\n        token,\n        expiresAt,\n        isUsed: false,\n      });\n\n      // Send password reset email\n      try {\n        await sendPasswordResetEmail(user.email, token);\n        console.log(`Password reset email sent to ${email}`);\n      } catch (emailError) {\n        console.error(\"Failed to send password reset email:\", emailError);\n        // Don't fail the request if email fails, just log it\n        // This prevents revealing whether an account exists or not\n      }\n\n      res.json({ message: \"Password reset email sent if account exists\" });\n    } catch (error) {\n      console.error(\"Password reset request error:\", error);\n      res.status(500).json({ message: \"Failed to process password reset request\" });\n    }\n  });\n\n  app.get(\"/api/auth/verify-reset-token\", async (req, res) => {\n    try {\n      const { token } = req.query;\n\n      if (!token || typeof token !== \"string\") {\n        return res.status(400).json({ message: \"Token is required\" });\n      }\n\n      const resetToken = await storage.getPasswordResetToken(token);\n\n      if (!resetToken) {\n        return res.status(404).json({ message: \"Invalid or expired token\" });\n      }\n\n      // Check if token is expired\n      if (new Date() > resetToken.expiresAt) {\n        return res.status(404).json({ message: \"Token has expired\" });\n      }\n\n      res.json({ message: \"Token is valid\" });\n    } catch (error) {\n      console.error(\"Token verification error:\", error);\n      res.status(500).json({ message: \"Failed to verify token\" });\n    }\n  });\n\n  app.post(\"/api/auth/password-reset\", async (req, res) => {\n    try {\n      const { token, password } = req.body;\n\n      if (!token || !password) {\n        return res.status(400).json({ message: \"Token and password are required\" });\n      }\n\n      if (password.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters long\" });\n      }\n\n      const resetToken = await storage.getPasswordResetToken(token);\n\n      if (!resetToken) {\n        return res.status(404).json({ message: \"Invalid or expired token\" });\n      }\n\n      // Check if token is expired\n      if (new Date() > resetToken.expiresAt) {\n        return res.status(404).json({ message: \"Token has expired\" });\n      }\n\n      // Mark token as used\n      await storage.markTokenAsUsed(resetToken.id);\n\n      // Update user's password\n      const hashedPassword = await hashPassword(password);\n      await storage.updateUser(resetToken.userId, { password: hashedPassword });\n\n      res.json({ message: \"Password reset successful\" });\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  // Mail settings routes\n  app.post(\"/api/settings/test-mail\", requireAdmin, async (req, res) => {\n    try {\n      const { config, testEmail } = req.body;\n\n      if (!config || !testEmail) {\n        return res.status(400).json({ message: \"Configuration and test email are required\" });\n      }\n\n      if (!config.enabled) {\n        return res.status(400).json({ message: \"Mail configuration is disabled\" });\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(testEmail)) {\n        return res.status(400).json({ message: \"Invalid email format\" });\n      }\n\n      await sendTestEmail(config, testEmail);\n      res.json({ message: \"Test email sent successfully\" });\n    } catch (error) {\n      console.error(\"Mail test error:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to send test email\";\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users\", requireAuth, async (req, res) => {\n    try {\n      const currentUser = req.session?.user;\n      \n      if (!currentUser) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      if (currentUser.role === \"admin\") {\n        // Admins can see all users\n        const users = await storage.getAllUsers();\n        res.json(users.map(user => ({ ...user, password: undefined })));\n      } else {\n        // Standard users can only see their own account\n        const user = await storage.getUser(currentUser.id);\n        if (user) {\n          res.json([{ ...user, password: undefined }]);\n        } else {\n          res.json([]);\n        }\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", requireAdmin, async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      if (userData.password) {\n        userData.password = await hashPassword(userData.password);\n      }\n      const user = await storage.createUser(userData);\n      res.json({ ...user, password: undefined });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userData = req.body;\n      if (userData.password) {\n        userData.password = await hashPassword(userData.password);\n      }\n      const user = await storage.updateUser(id, userData);\n      res.json({ ...user, password: undefined });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(id);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Deactivate all LDAP users\n  app.post(\"/api/users/deactivate-ldap\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const ldapUsers = users.filter(user => user.authMethod === \"ldap\");\n      \n      // Deactivate all LDAP users\n      for (const user of ldapUsers) {\n        await storage.updateUser(user.id, { isActive: false });\n      }\n      \n      res.json({ \n        message: \"LDAP users deactivated successfully\",\n        deactivatedCount: ldapUsers.length \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to deactivate LDAP users\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get(\"/api/dashboards\", requireAuth, async (req, res) => {\n    try {\n      const user = req.session.user!;\n      let dashboards;\n      \n      if (user.role === \"admin\") {\n        dashboards = await storage.getAllDashboards();\n      } else {\n        dashboards = await storage.getDashboardsByUser(user.id);\n      }\n      \n      // Add card count to each dashboard\n      const dashboardsWithCardCount = await Promise.all(\n        dashboards.map(async (dashboard) => {\n          const cards = await storage.getCardsByDashboard(dashboard.id);\n          return {\n            ...dashboard,\n            cardCount: cards.length\n          };\n        })\n      );\n      \n      res.json(dashboardsWithCardCount);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboards\" });\n    }\n  });\n\n  app.get(\"/api/dashboards/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const dashboard = await storage.getDashboard(id);\n      \n      if (!dashboard) {\n        return res.status(404).json({ message: \"Dashboard not found\" });\n      }\n\n      const user = req.session.user!;\n      if (user.role !== \"admin\" && dashboard.ownerId !== user.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(dashboard);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard\" });\n    }\n  });\n\n  // List all public dashboards\n  app.get(\"/api/public/dashboards\", async (req, res) => {\n    try {\n      const dashboards = await storage.getPublicDashboards();\n      \n      // Add card count to each dashboard\n      const dashboardsWithCardCount = await Promise.all(\n        dashboards.map(async (dashboard) => {\n          const cards = await storage.getCardsByDashboard(dashboard.id);\n          return {\n            ...dashboard,\n            cardCount: cards.length\n          };\n        })\n      );\n      \n      res.json(dashboardsWithCardCount);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch public dashboards\" });\n    }\n  });\n\n  // Public dashboard access route\n  app.get(\"/api/public/dashboards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const dashboard = await storage.getDashboard(id);\n      \n      if (!dashboard) {\n        return res.status(404).json({ message: \"Dashboard not found\" });\n      }\n\n      if (!dashboard.isPublic) {\n        return res.status(404).json({ message: \"Dashboard not found\" });\n      }\n\n      res.json(dashboard);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard\" });\n    }\n  });\n\n  // Public dashboard cards access route\n  app.get(\"/api/public/dashboards/:id/cards\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const dashboard = await storage.getDashboard(id);\n      \n      if (!dashboard) {\n        return res.status(404).json({ message: \"Dashboard not found\" });\n      }\n\n      if (!dashboard.isPublic) {\n        return res.status(404).json({ message: \"Dashboard not found\" });\n      }\n\n      const cards = await storage.getCardsByDashboard(id);\n      res.json(cards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard cards\" });\n    }\n  });\n\n  app.post(\"/api/dashboards\", requireAuth, async (req, res) => {\n    try {\n      const user = req.session.user!;\n      const dashboardData = insertDashboardSchema.parse({\n        ...req.body,\n        ownerId: user.id,\n      });\n      const dashboard = await storage.createDashboard(dashboardData);\n      res.json(dashboard);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create dashboard\" });\n    }\n  });\n\n  app.put(\"/api/dashboards/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const dashboard = await storage.getDashboard(id);\n      \n      if (!dashboard) {\n        return res.status(404).json({ message: \"Dashboard not found\" });\n      }\n\n      const user = req.session.user!;\n      if (user.role !== \"admin\" && dashboard.ownerId !== user.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updatedDashboard = await storage.updateDashboard(id, req.body);\n      res.json(updatedDashboard);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update dashboard\" });\n    }\n  });\n\n  app.delete(\"/api/dashboards/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const dashboard = await storage.getDashboard(id);\n      \n      if (!dashboard) {\n        return res.status(404).json({ message: \"Dashboard not found\" });\n      }\n\n      const user = req.session.user!;\n      if (user.role !== \"admin\" && dashboard.ownerId !== user.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteDashboard(id);\n      res.json({ message: \"Dashboard deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete dashboard\" });\n    }\n  });\n\n  // Data source routes\n  app.get(\"/api/data-sources\", requireAuth, async (req, res) => {\n    try {\n      const dataSources = await storage.getAllDataSources();\n      res.json(dataSources);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch data sources\" });\n    }\n  });\n\n  app.get(\"/api/data-sources/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const dataSource = await storage.getDataSource(id);\n      if (!dataSource) {\n        return res.status(404).json({ message: \"Data source not found\" });\n      }\n      res.json(dataSource);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch data source\" });\n    }\n  });\n\n  // Test data source endpoint\n  app.post(\"/api/data-sources/test\", requireAuth, async (req, res) => {\n    try {\n      const { type, config } = req.body;\n      \n      if (type === \"api\" && config.curlRequest) {\n        // Parse cURL command to extract URL and headers\n        const curlRequest = config.curlRequest.trim();\n        const urlMatch = curlRequest.match(/'([^']+)'|\"([^\"]+)\"|(\\S+)/g);\n        let url = '';\n        const headers: Record<string, string> = {};\n        \n        // Find URL and headers from cURL command\n        for (let i = 0; i < urlMatch?.length; i++) {\n          const part = urlMatch[i].replace(/['\"]/g, '');\n          if (part.startsWith('http')) {\n            url = part;\n          } else if (part === '-H' && i + 1 < urlMatch.length) {\n            const header = urlMatch[i + 1].replace(/['\"]/g, '');\n            const [key, ...valueParts] = header.split(':');\n            if (key && valueParts.length > 0) {\n              headers[key.trim()] = valueParts.join(':').trim();\n            }\n          }\n        }\n        \n        if (!url) {\n          return res.status(400).json({ message: \"Could not parse URL from cURL request\" });\n        }\n        \n        // Make the API request\n        const response = await fetch(url, {\n          method: 'GET',\n          headers,\n        });\n        \n        const responseText = await response.text();\n        let parsedResponse;\n        \n        try {\n          parsedResponse = JSON.parse(responseText);\n        } catch {\n          parsedResponse = { raw: responseText };\n        }\n        \n        // Extract fields from JSON response\n        const extractFields = (obj: any, prefix = ''): string[] => {\n          let fields: string[] = [];\n          if (typeof obj === 'object' && obj !== null) {\n            if (Array.isArray(obj)) {\n              if (obj.length > 0) {\n                fields = fields.concat(extractFields(obj[0], prefix));\n              }\n            } else {\n              Object.keys(obj).forEach(key => {\n                const fieldName = prefix ? `${prefix}.${key}` : key;\n                fields.push(fieldName);\n                if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {\n                  fields = fields.concat(extractFields(obj[key], fieldName));\n                }\n              });\n            }\n          }\n          return fields;\n        };\n        \n        const fields = extractFields(parsedResponse);\n        \n        // Create structure overview\n        const createStructure = (obj: any): any => {\n          if (typeof obj !== 'object' || obj === null) {\n            return typeof obj;\n          }\n          if (Array.isArray(obj)) {\n            return obj.length > 0 ? [createStructure(obj[0])] : [];\n          }\n          const structure: any = {};\n          Object.keys(obj).forEach(key => {\n            structure[key] = createStructure(obj[key]);\n          });\n          return structure;\n        };\n        \n        const structure = createStructure(parsedResponse);\n        \n        res.json({\n          success: true,\n          statusCode: response.status,\n          response: parsedResponse,\n          fields,\n          structure,\n          url,\n          headers: Object.keys(headers)\n        });\n      } else if (type === \"jira\" && config.jiraUrl && config.jiraUsername && config.jiraPassword) {\n        // JIRA authentication and project fetching\n        const auth = Buffer.from(`${config.jiraUsername}:${config.jiraPassword}`).toString('base64');\n        const baseUrl = config.jiraUrl.replace(/\\/$/, ''); // Remove trailing slash\n        \n        try {\n          // Test authentication by fetching projects\n          const projectsResponse = await fetch(`${baseUrl}/rest/api/2/project`, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Basic ${auth}`,\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          });\n          \n          if (!projectsResponse.ok) {\n            throw new Error(`JIRA authentication failed: ${projectsResponse.status} ${projectsResponse.statusText}`);\n          }\n          \n          const projects = await projectsResponse.json();\n          \n          // Test API access by fetching current user info\n          const userResponse = await fetch(`${baseUrl}/rest/api/2/myself`, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Basic ${auth}`,\n              'Accept': 'application/json'\n            }\n          });\n          \n          // Validate that user authentication actually worked\n          if (!userResponse.ok) {\n            throw new Error(`JIRA user authentication failed: ${userResponse.status} ${userResponse.statusText}`);\n          }\n          \n          const userInfo = await userResponse.json();\n          \n          // Ensure we got valid user data back\n          if (!userInfo || !userInfo.accountId) {\n            throw new Error('JIRA authentication failed: Invalid or empty user data returned');\n          }\n          \n          // Validate projects array exists and is valid\n          if (!Array.isArray(projects)) {\n            throw new Error('JIRA authentication failed: Invalid projects data returned');\n          }\n          \n          // Fetch saved filters\n          let savedFilters: any[] = [];\n          try {\n            // First try to fetch favorite filters\n            const favFiltersResponse = await fetch(`${baseUrl}/rest/api/2/filter/favourite`, {\n              method: 'GET',\n              headers: {\n                'Authorization': `Basic ${auth}`,\n                'Accept': 'application/json'\n              }\n            });\n            \n            if (favFiltersResponse.ok) {\n              const favFilters = await favFiltersResponse.json();\n              if (Array.isArray(favFilters)) {\n                savedFilters = savedFilters.concat(favFilters.map((filter: any) => ({\n                  id: filter.id,\n                  name: filter.name,\n                  description: filter.description,\n                  jql: filter.jql,\n                  favourite: true,\n                  owner: filter.owner?.displayName || filter.owner?.name || 'Unknown'\n                })));\n              }\n            }\n            \n            // Then try to fetch additional accessible filters via search (limit to 20 for performance)\n            const searchFiltersResponse = await fetch(`${baseUrl}/rest/api/2/filter/search?maxResults=20`, {\n              method: 'GET',\n              headers: {\n                'Authorization': `Basic ${auth}`,\n                'Accept': 'application/json'\n              }\n            });\n            \n            if (searchFiltersResponse.ok) {\n              const searchResult = await searchFiltersResponse.json();\n              if (searchResult.values && Array.isArray(searchResult.values)) {\n                // Add non-favorite filters that aren't already in the list\n                const existingFilterIds = new Set(savedFilters.map(f => f.id));\n                const additionalFilters = searchResult.values\n                  .filter((filter: any) => !existingFilterIds.has(filter.id))\n                  .map((filter: any) => ({\n                    id: filter.id,\n                    name: filter.name,\n                    description: filter.description,\n                    jql: filter.jql,\n                    favourite: false,\n                    owner: filter.owner?.displayName || filter.owner?.name || 'Unknown'\n                  }));\n                  \n                savedFilters = savedFilters.concat(additionalFilters);\n              }\n            }\n          } catch (filterError: any) {\n            // Don't fail the entire request if filter fetching fails, just log it\n            console.warn(\"Failed to fetch JIRA saved filters:\", filterError.message);\n          }\n          \n          res.json({\n            success: true,\n            message: \"JIRA connection successful\",\n            projects: projects.map((project: any) => ({\n              key: project.key,\n              name: project.name,\n              id: project.id,\n              projectTypeKey: project.projectTypeKey\n            })),\n            user: {\n              displayName: userInfo.displayName,\n              emailAddress: userInfo.emailAddress,\n              accountId: userInfo.accountId\n            },\n            savedFilters: savedFilters,\n            jiraUrl: baseUrl\n          });\n        } catch (error: any) {\n          console.error(\"JIRA test error:\", error);\n          throw new Error(`JIRA connection failed: ${error.message}`);\n        }\n      } else if (type === \"smax\" && config.smaxUrl && config.smaxUsername && config.smaxPassword) {\n        // SMAX authentication and service fetching\n        const baseUrl = config.smaxUrl.replace(/\\/$/, ''); // Remove trailing slash\n        \n        try {\n          // First, get authentication token\n          const authResponse = await fetch(`${baseUrl}/auth/authentication-endpoint/authenticate/login?TENANTID=1`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              Login: config.smaxUsername,\n              Password: config.smaxPassword\n            })\n          });\n          \n          if (!authResponse.ok) {\n            throw new Error(`SMAX authentication failed: ${authResponse.status} ${authResponse.statusText}`);\n          }\n          \n          const authData = await authResponse.json();\n          const token = authData.token;\n          \n          if (!token) {\n            throw new Error('SMAX authentication failed: No token received');\n          }\n          \n          // Test API access by fetching available entity types/services\n          const entitiesResponse = await fetch(`${baseUrl}/rest/1/metadata`, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          });\n          \n          let services: { name: string; displayName: string }[] = [];\n          if (entitiesResponse.ok) {\n            const entitiesData = await entitiesResponse.json();\n            // Extract common SMAX entity types\n            services = [\n              { name: 'Request', displayName: 'Service Requests' },\n              { name: 'Incident', displayName: 'Incidents' },\n              { name: 'Problem', displayName: 'Problems' },\n              { name: 'Change', displayName: 'Change Requests' },\n              { name: 'Task', displayName: 'Tasks' },\n              { name: 'KnowledgeDocument', displayName: 'Knowledge Articles' }\n            ];\n          }\n          \n          // Test current user info\n          const userResponse = await fetch(`${baseUrl}/rest/1/ems/Person`, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Accept': 'application/json'\n            }\n          });\n          \n          let userInfo = null;\n          if (userResponse.ok) {\n            const userData = await userResponse.json();\n            if (userData.entities && userData.entities.length > 0) {\n              const user = userData.entities[0];\n              userInfo = {\n                id: user.entity_id,\n                name: user.Name || user.DisplayName,\n                email: user.Email\n              };\n            }\n          }\n          \n          res.json({\n            success: true,\n            message: \"SMAX connection successful\",\n            services: services,\n            user: userInfo,\n            smaxUrl: baseUrl,\n            token: token // We'll need this for subsequent requests\n          });\n        } catch (error: any) {\n          console.error(\"SMAX test error:\", error);\n          throw new Error(`SMAX connection failed: ${error.message}`);\n        }\n      } else {\n        res.status(400).json({ message: \"Unsupported data source type for testing\" });\n      }\n    } catch (error: any) {\n      console.error(\"Data source test error:\", error);\n      res.status(500).json({ message: error.message || \"Failed to test data source\" });\n    }\n  });\n\n  app.post(\"/api/data-sources\", requireAuth, async (req, res) => {\n    try {\n      const dataSourceData = insertDataSourceSchema.parse(req.body);\n      const dataSource = await storage.createDataSource(dataSourceData);\n      res.json(dataSource);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create data source\" });\n    }\n  });\n\n  app.put(\"/api/data-sources/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const dataSource = await storage.updateDataSource(id, req.body);\n      res.json(dataSource);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update data source\" });\n    }\n  });\n\n  app.delete(\"/api/data-sources/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteDataSource(id);\n      res.json({ message: \"Data source deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete data source\" });\n    }\n  });\n\n  // Dashboard card routes\n  app.get(\"/api/dashboards/:dashboardId/cards\", requireAuth, async (req, res) => {\n    try {\n      const { dashboardId } = req.params;\n      const cards = await storage.getCardsByDashboard(dashboardId);\n      res.json(cards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard cards\" });\n    }\n  });\n\n  app.post(\"/api/dashboards/:dashboardId/cards\", requireAuth, async (req, res) => {\n    try {\n      const { dashboardId } = req.params;\n      const cardData = insertDashboardCardSchema.parse({\n        ...req.body,\n        dashboardId,\n      });\n      const card = await storage.createDashboardCard(cardData);\n      res.json(card);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create dashboard card\" });\n    }\n  });\n\n  app.put(\"/api/cards/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const card = await storage.updateDashboardCard(id, req.body);\n      res.json(card);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update dashboard card\" });\n    }\n  });\n\n  app.delete(\"/api/cards/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteDashboardCard(id);\n      res.json({ message: \"Dashboard card deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete dashboard card\" });\n    }\n  });\n\n  // Settings routes - standard users can view settings (read-only)\n  app.get(\"/api/settings\", requireAuth, async (req, res) => {\n    try {\n      const settings = await storage.getAllSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post(\"/api/settings\", requireAdmin, async (req, res) => {\n    try {\n      const settingData = insertSettingSchema.parse(req.body);\n      const setting = await storage.setSetting(settingData);\n      res.json(setting);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to save setting\" });\n    }\n  });\n\n  // LDAP Settings endpoints\n  app.get(\"/api/settings/ldap\", requireAdmin, async (req, res) => {\n    try {\n      const ldapSettings = await storage.getLdapSettings();\n      if (!ldapSettings) {\n        return res.json({\n          url: \"ldap://localhost:389\",\n          baseDN: \"ou=users,dc=example,dc=com\",\n          bindDN: \"\",\n          bindCredentials: \"\",\n          searchFilter: \"(uid={username})\",\n          tlsRejectUnauthorized: false,\n          enabled: false\n        });\n      }\n      res.json(ldapSettings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch LDAP settings\" });\n    }\n  });\n\n  app.post(\"/api/settings/ldap\", requireAdmin, async (req, res) => {\n    try {\n      const ldapSettings = await storage.updateLdapSettings(req.body);\n      res.json(ldapSettings);\n    } catch (error) {\n      console.error(\"Failed to save LDAP settings:\", error);\n      res.status(400).json({ message: \"Failed to save LDAP settings\" });\n    }\n  });\n\n  // Mail Settings endpoints\n  app.get(\"/api/settings/mail\", requireAdmin, async (req, res) => {\n    try {\n      const mailSettings = await storage.getMailSettings();\n      if (!mailSettings) {\n        return res.json({\n          host: \"smtp.gmail.com\",\n          port: 587,\n          secure: false,\n          authUser: \"\",\n          authPass: \"\",\n          fromAddress: \"\",\n          enabled: false\n        });\n      }\n      res.json(mailSettings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch mail settings\" });\n    }\n  });\n\n  app.post(\"/api/settings/mail\", requireAdmin, async (req, res) => {\n    try {\n      const mailSettings = await storage.updateMailSettings(req.body);\n      res.json(mailSettings);\n    } catch (error) {\n      console.error(\"Failed to save mail settings:\", error);\n      res.status(400).json({ message: \"Failed to save mail settings\" });\n    }\n  });\n\n  // LDAP user search endpoint\n  app.get(\"/api/auth/search-ldap/:username\", requireAdmin, async (req, res) => {\n    try {\n      const { username } = req.params;\n      \n      if (!username || username.trim() === \"\") {\n        return res.status(400).json({ message: \"Username is required\" });\n      }\n\n      const userInfo = await searchLDAPUser(username);\n      \n      if (!userInfo) {\n        return res.status(404).json({ message: \"User not found in LDAP directory\" });\n      }\n\n      res.json({\n        message: \"User found successfully\",\n        user: userInfo\n      });\n    } catch (error) {\n      console.error(\"LDAP user search error:\", error);\n      res.status(500).json({ message: \"LDAP user search failed\" });\n    }\n  });\n\n  // LDAP test endpoint\n  app.post(\"/api/auth/test-ldap\", requireAdmin, async (req, res) => {\n    try {\n      const { username, password, config } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      if (!config) {\n        return res.status(400).json({ message: \"LDAP configuration is required for testing\" });\n      }\n\n      // Test LDAP connection using the provided configuration directly\n      const testResult = await testLDAPConnection(config, username, password);\n      \n      if (testResult.success) {\n        res.json({ \n          message: \"LDAP connection and authentication successful\", \n          config: {\n            url: config.url,\n            baseDN: config.baseDN,\n            searchFilter: config.searchFilter,\n          },\n          status: \"success\"\n        });\n      } else {\n        // Connection failed - could be server unreachable, wrong config, or invalid credentials\n        res.status(400).json({ \n          message: testResult.error || \"LDAP connection or authentication failed. Please check your server configuration and test credentials.\",\n          status: \"failed\"\n        });\n      }\n    } catch (error) {\n      console.error(\"LDAP test error:\", error);\n      res.status(500).json({ \n        message: \"LDAP test failed due to server error. Please check your configuration and try again.\",\n        status: \"error\"\n      });\n    }\n  });\n\n  // Data fetching for cards\n  app.post(\"/api/data-sources/:id/test\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const dataSource = await storage.getDataSource(id);\n      \n      if (!dataSource) {\n        return res.status(404).json({ message: \"Data source not found\" });\n      }\n\n      // Update last test time\n      await storage.updateDataSource(id, { lastPullAt: new Date() });\n      \n      res.json({ message: \"Data source tested successfully\", status: \"connected\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to test data source\" });\n    }\n  });\n\n  app.get(\"/api/data-sources/:id/data\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const dataSource = await storage.getDataSource(id);\n      \n      if (!dataSource) {\n        return res.status(404).json({ message: \"Data source not found\" });\n      }\n\n      // Update last pull time to track actual data pulls\n      await storage.updateDataSource(id, { lastPullAt: new Date() });\n\n      if (dataSource.type === \"api\" && (dataSource.config as any)?.curlRequest) {\n        try {\n          // Parse cURL command to extract URL and headers\n          const curlRequest = (dataSource.config as any).curlRequest.trim();\n          const urlMatch = curlRequest.match(/'([^']+)'|\"([^\"]+)\"|(\\S+)/g);\n          let url = '';\n          const headers: Record<string, string> = {};\n          \n          // Find URL and headers from cURL command\n          for (let i = 0; i < urlMatch?.length; i++) {\n            const part = urlMatch[i].replace(/['\"]/g, '');\n            if (part.startsWith('http')) {\n              url = part;\n            } else if (part === '-H' && i + 1 < urlMatch.length) {\n              const header = urlMatch[i + 1].replace(/['\"]/g, '');\n              const [key, ...valueParts] = header.split(':');\n              if (key && valueParts.length > 0) {\n                headers[key.trim()] = valueParts.join(':').trim();\n              }\n            }\n          }\n          \n          if (!url) {\n            return res.json({\n              data: [],\n              fields: [],\n              lastUpdated: new Date().toISOString(),\n              error: \"Could not parse URL from cURL request\"\n            });\n          }\n          \n          // Make the API request\n          const response = await fetch(url, {\n            method: 'GET',\n            headers,\n          });\n          \n          const responseText = await response.text();\n          let parsedResponse;\n          \n          try {\n            parsedResponse = JSON.parse(responseText);\n          } catch {\n            parsedResponse = { raw: responseText };\n          }\n          \n          // Extract fields from JSON response\n          const extractFields = (obj: any, prefix = ''): string[] => {\n            let fields: string[] = [];\n            if (typeof obj === 'object' && obj !== null) {\n              if (Array.isArray(obj)) {\n                if (obj.length > 0) {\n                  fields = fields.concat(extractFields(obj[0], prefix));\n                }\n              } else {\n                Object.keys(obj).forEach(key => {\n                  const fieldName = prefix ? `${prefix}.${key}` : key;\n                  fields.push(fieldName);\n                  if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {\n                    fields = fields.concat(extractFields(obj[key], fieldName));\n                  }\n                });\n              }\n            }\n            return fields;\n          };\n          \n          const allFields = extractFields(parsedResponse);\n          const selectedFields = (dataSource.config as any)?.selectedFields || allFields;\n          const fieldDisplayNames = (dataSource.config as any)?.fieldDisplayNames || {};\n          \n          // Convert data to chart-friendly format and filter by selected fields\n          let chartData = [];\n          if (Array.isArray(parsedResponse)) {\n            // If it's an array of objects, flatten nested objects and filter by selected fields\n            chartData = parsedResponse.map(item => {\n              const flattened: any = {};\n              const flattenObject = (obj: any, prefix = '') => {\n                Object.keys(obj).forEach(key => {\n                  const value = obj[key];\n                  const newKey = prefix ? `${prefix}.${key}` : key;\n                  \n                  if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n                    flattenObject(value, newKey);\n                  } else {\n                    flattened[newKey] = value;\n                  }\n                });\n              };\n              \n              if (typeof item === 'object' && item !== null) {\n                flattenObject(item);\n                \n                // Filter to only selected fields\n                const filteredItem: any = {};\n                selectedFields.forEach((field: string) => {\n                  if (flattened.hasOwnProperty(field)) {\n                    filteredItem[field] = flattened[field];\n                  }\n                });\n                return filteredItem;\n              }\n              return item;\n            });\n          } else if (parsedResponse && typeof parsedResponse === 'object') {\n            // If it's an object, convert to array format for charts and filter by selected fields\n            chartData = Object.keys(parsedResponse)\n              .filter(key => selectedFields.includes(key))\n              .map(key => ({\n                name: key,\n                value: parsedResponse[key]\n              }));\n          }\n          \n          res.json({\n            data: chartData,\n            fields: selectedFields,\n            fieldDisplayNames: fieldDisplayNames,\n            lastUpdated: new Date().toISOString(),\n          });\n        } catch (error: any) {\n          console.error(\"Data fetch error:\", error);\n          res.json({\n            data: [],\n            fields: [],\n            lastUpdated: new Date().toISOString(),\n            error: error.message || \"Failed to fetch API data\"\n          });\n        }\n      } else if (dataSource.type === \"jira\" && (dataSource.config as any)?.jiraUrl) {\n        try {\n          const config = dataSource.config as any;\n          const auth = Buffer.from(`${config.jiraUsername}:${config.jiraPassword}`).toString('base64');\n          const baseUrl = config.jiraUrl.replace(/\\/$/, '');\n          \n          // Build JQL query\n          let jql = '';\n          if (config.selectedJiraProject) {\n            jql = `project = \"${config.selectedJiraProject}\"`;\n            if (config.jiraQuery && config.jiraQuery.trim()) {\n              jql += ` AND (${config.jiraQuery.trim()})`;\n            }\n          } else if (config.jiraQuery && config.jiraQuery.trim()) {\n            jql = config.jiraQuery.trim();\n          } else {\n            jql = 'ORDER BY created DESC';\n          }\n          \n          // Fetch issues from JIRA\n          const searchUrl = `${baseUrl}/rest/api/2/search?jql=${encodeURIComponent(jql)}&maxResults=100&fields=*all`;\n          const response = await fetch(searchUrl, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Basic ${auth}`,\n              'Accept': 'application/json'\n            }\n          });\n          \n          if (!response.ok) {\n            throw new Error(`JIRA API error: ${response.status} ${response.statusText}`);\n          }\n          \n          const jiraData = await response.json();\n          const issues = jiraData.issues || [];\n          \n          // Transform JIRA issues to flat structure\n          const chartData = issues.map((issue: any) => ({\n            id: issue.id,\n            key: issue.key,\n            summary: issue.fields.summary || '',\n            status: issue.fields.status?.name || '',\n            assignee: issue.fields.assignee?.displayName || 'Unassigned',\n            reporter: issue.fields.reporter?.displayName || '',\n            priority: issue.fields.priority?.name || '',\n            issueType: issue.fields.issuetype?.name || '',\n            created: issue.fields.created ? new Date(issue.fields.created).toLocaleDateString() : '',\n            updated: issue.fields.updated ? new Date(issue.fields.updated).toLocaleDateString() : '',\n            resolved: issue.fields.resolutiondate ? new Date(issue.fields.resolutiondate).toLocaleDateString() : '',\n            project: issue.fields.project?.name || '',\n            projectKey: issue.fields.project?.key || '',\n            description: issue.fields.description || '',\n            labels: Array.isArray(issue.fields.labels) ? issue.fields.labels.join(', ') : '',\n            components: Array.isArray(issue.fields.components) ? issue.fields.components.map((c: any) => c.name).join(', ') : '',\n            fixVersions: Array.isArray(issue.fields.fixVersions) ? issue.fields.fixVersions.map((v: any) => v.name).join(', ') : '',\n            storyPoints: issue.fields.customfield_10016 || '', // Common story points field\n            sprint: issue.fields.customfield_10020 ? \n              (Array.isArray(issue.fields.customfield_10020) && issue.fields.customfield_10020.length > 0 ? \n                issue.fields.customfield_10020[issue.fields.customfield_10020.length - 1].name : '') : ''\n          }));\n          \n          // Get all available fields\n          const allFields = chartData.length > 0 ? Object.keys(chartData[0]) : [];\n          const selectedFields = config.selectedFields || allFields;\n          const fieldDisplayNames = config.fieldDisplayNames || {};\n          \n          // Default field display names for JIRA\n          const defaultJiraFieldNames: Record<string, string> = {\n            id: 'Issue ID',\n            key: 'Issue Key',\n            summary: 'Summary',\n            status: 'Status',\n            assignee: 'Assignee',\n            reporter: 'Reporter',\n            priority: 'Priority',\n            issueType: 'Issue Type',\n            created: 'Created Date',\n            updated: 'Updated Date',\n            resolved: 'Resolved Date',\n            project: 'Project Name',\n            projectKey: 'Project Key',\n            description: 'Description',\n            labels: 'Labels',\n            components: 'Components',\n            fixVersions: 'Fix Versions',\n            storyPoints: 'Story Points',\n            sprint: 'Sprint'\n          };\n          \n          // Merge with custom field names\n          const finalFieldNames = { ...defaultJiraFieldNames, ...fieldDisplayNames };\n          \n          // Filter data by selected fields\n          const filteredData = chartData.map((item: any) => {\n            const filtered: any = {};\n            selectedFields.forEach((field: string) => {\n              if (item.hasOwnProperty(field)) {\n                filtered[field] = item[field];\n              }\n            });\n            return filtered;\n          });\n          \n          res.json({\n            data: filteredData,\n            fields: selectedFields,\n            fieldDisplayNames: finalFieldNames,\n            lastUpdated: new Date().toISOString(),\n            totalIssues: jiraData.total || issues.length,\n            jql: jql\n          });\n        } catch (error: any) {\n          console.error(\"JIRA data fetch error:\", error);\n          res.json({\n            data: [],\n            fields: [],\n            lastUpdated: new Date().toISOString(),\n            error: error.message || \"Failed to fetch JIRA data\"\n          });\n        }\n      } else if (dataSource.type === \"smax\" && (dataSource.config as any)?.smaxUrl) {\n        try {\n          const config = dataSource.config as any;\n          const baseUrl = config.smaxUrl.replace(/\\/$/, '');\n          \n          // Get authentication token\n          const authResponse = await fetch(`${baseUrl}/auth/authentication-endpoint/authenticate/login?TENANTID=1`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n              Login: config.smaxUsername,\n              Password: config.smaxPassword\n            })\n          });\n          \n          if (!authResponse.ok) {\n            throw new Error(`SMAX authentication failed: ${authResponse.status} ${authResponse.statusText}`);\n          }\n          \n          const authData = await authResponse.json();\n          const token = authData.token;\n          \n          if (!token) {\n            throw new Error('SMAX authentication failed: No token received');\n          }\n          \n          // Build query parameters\n          let queryParams = '';\n          if (config.smaxQuery && config.smaxQuery.trim()) {\n            queryParams = `&query=${encodeURIComponent(config.smaxQuery.trim())}`;\n          }\n          \n          // Fetch records from SMAX\n          const entityType = config.selectedSmaxService || 'Request';\n          const searchUrl = `${baseUrl}/rest/1/ems/${entityType}?layout=Id,Title,Status,Priority,AssignedTo,RequestedBy,Category,Subcategory,CreationTime,LastUpdateTime,ClosureTime,Description,Service,ImpactScope,Urgency,Phase&size=100${queryParams}`;\n          \n          const response = await fetch(searchUrl, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Accept': 'application/json'\n            }\n          });\n          \n          if (!response.ok) {\n            throw new Error(`SMAX API error: ${response.status} ${response.statusText}`);\n          }\n          \n          const smaxData = await response.json();\n          const entities = smaxData.entities || [];\n          \n          // Transform SMAX entities to flat structure\n          const chartData = entities.map((entity: any) => ({\n            id: entity.entity_id || entity.Id,\n            title: entity.Title || '',\n            status: entity.Status || '',\n            priority: entity.Priority || '',\n            assignedTo: entity.AssignedTo || 'Unassigned',\n            requestedBy: entity.RequestedBy || '',\n            category: entity.Category || '',\n            subcategory: entity.Subcategory || '',\n            creationTime: entity.CreationTime ? new Date(entity.CreationTime).toLocaleDateString() : '',\n            lastUpdateTime: entity.LastUpdateTime ? new Date(entity.LastUpdateTime).toLocaleDateString() : '',\n            closureTime: entity.ClosureTime ? new Date(entity.ClosureTime).toLocaleDateString() : '',\n            description: entity.Description || '',\n            service: entity.Service || '',\n            impactScope: entity.ImpactScope || '',\n            urgency: entity.Urgency || '',\n            phase: entity.Phase || '',\n            entityType: entityType\n          }));\n          \n          // Get all available fields\n          const allFields = chartData.length > 0 ? Object.keys(chartData[0]) : [];\n          const selectedFields = config.selectedFields || allFields;\n          const fieldDisplayNames = config.fieldDisplayNames || {};\n          \n          // Default field display names for SMAX\n          const defaultSmaxFieldNames: Record<string, string> = {\n            id: 'ID',\n            title: 'Title',\n            status: 'Status',\n            priority: 'Priority',\n            assignedTo: 'Assigned To',\n            requestedBy: 'Requested By',\n            category: 'Category',\n            subcategory: 'Subcategory',\n            creationTime: 'Created',\n            lastUpdateTime: 'Last Updated',\n            closureTime: 'Closed',\n            description: 'Description',\n            service: 'Service',\n            impactScope: 'Impact Scope',\n            urgency: 'Urgency',\n            phase: 'Phase',\n            entityType: 'Type'\n          };\n          \n          // Merge with custom field names\n          const finalFieldNames = { ...defaultSmaxFieldNames, ...fieldDisplayNames };\n          \n          // Filter data by selected fields\n          const filteredData = chartData.map((item: any) => {\n            const filtered: any = {};\n            selectedFields.forEach((field: string) => {\n              if (item.hasOwnProperty(field)) {\n                filtered[field] = item[field];\n              }\n            });\n            return filtered;\n          });\n          \n          res.json({\n            data: filteredData,\n            fields: selectedFields,\n            fieldDisplayNames: finalFieldNames,\n            lastUpdated: new Date().toISOString(),\n            totalRecords: smaxData.meta?.total_count || entities.length,\n            entityType: entityType,\n            query: config.smaxQuery || ''\n          });\n        } catch (error: any) {\n          console.error(\"SMAX data fetch error:\", error);\n          res.json({\n            data: [],\n            fields: [],\n            lastUpdated: new Date().toISOString(),\n            error: error.message || \"Failed to fetch SMAX data\"\n          });\n        }\n      } else {\n        // For non-supported data sources or missing configuration, return empty data\n        res.json({\n          data: [],\n          fields: [],\n          lastUpdated: new Date().toISOString(),\n          message: \"Data source type not supported or not configured\"\n        });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":52942},"server/storage.ts":{"content":"import { \n  users, dashboards, dataSources, dashboardCards, settings, passwordResetTokens, ldapSettings, mailSettings,\n  type User, type InsertUser, \n  type Dashboard, type InsertDashboard,\n  type DataSource, type InsertDataSource,\n  type DashboardCard, type InsertDashboardCard,\n  type Setting, type InsertSetting,\n  type LdapSettings, type InsertLdapSettings,\n  type MailSettings, type InsertMailSettings,\n  type PasswordResetToken, type InsertPasswordResetToken\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, lt } from \"drizzle-orm\";\nimport crypto from \"crypto\";\n\n// Encryption functions for settings passwords (using symmetric encryption)\nconst ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'fallback-key-32-chars-long-12345';\nconst ALGORITHM = 'aes-256-cbc';\n\nfunction encryptPassword(password: string): string {\n  if (!password || password.trim() === \"\") {\n    return \"\";\n  }\n  \n  const iv = crypto.randomBytes(16);\n  const key = crypto.createHash('sha256').update(ENCRYPTION_KEY).digest();\n  const cipher = crypto.createCipheriv(ALGORITHM, key, iv);\n  \n  let encrypted = cipher.update(password, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  \n  // Combine IV and encrypted data\n  return iv.toString('hex') + ':' + encrypted;\n}\n\nfunction decryptPassword(encryptedPassword: string): string {\n  if (!encryptedPassword || encryptedPassword.trim() === \"\") {\n    return \"\";\n  }\n  \n  try {\n    const parts = encryptedPassword.split(':');\n    if (parts.length !== 2) {\n      return encryptedPassword; // Return as-is if not encrypted format (backward compatibility)\n    }\n    \n    const iv = Buffer.from(parts[0], 'hex');\n    const encrypted = parts[1];\n    const key = crypto.createHash('sha256').update(ENCRYPTION_KEY).digest();\n    \n    const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);\n    \n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    \n    return decrypted;\n  } catch (error) {\n    console.error('Failed to decrypt password:', error);\n    return encryptedPassword; // Return as-is if decryption fails (backward compatibility)\n  }\n}\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Dashboards\n  getDashboard(id: string): Promise<Dashboard | undefined>;\n  getDashboardsByUser(userId: string): Promise<Dashboard[]>;\n  getAllDashboards(): Promise<Dashboard[]>;\n  getPublicDashboards(): Promise<Dashboard[]>;\n  createDashboard(dashboard: InsertDashboard): Promise<Dashboard>;\n  updateDashboard(id: string, dashboard: Partial<InsertDashboard>): Promise<Dashboard>;\n  deleteDashboard(id: string): Promise<void>;\n  \n  // Data Sources\n  getDataSource(id: string): Promise<DataSource | undefined>;\n  getAllDataSources(): Promise<DataSource[]>;\n  createDataSource(dataSource: InsertDataSource): Promise<DataSource>;\n  updateDataSource(id: string, dataSource: Partial<InsertDataSource>): Promise<DataSource>;\n  deleteDataSource(id: string): Promise<void>;\n  \n  // Dashboard Cards\n  getDashboardCard(id: string): Promise<DashboardCard | undefined>;\n  getCardsByDashboard(dashboardId: string): Promise<DashboardCard[]>;\n  createDashboardCard(card: InsertDashboardCard): Promise<DashboardCard>;\n  updateDashboardCard(id: string, card: Partial<InsertDashboardCard>): Promise<DashboardCard>;\n  deleteDashboardCard(id: string): Promise<void>;\n  \n  // Settings\n  getSetting(key: string): Promise<Setting | undefined>;\n  getAllSettings(): Promise<Setting[]>;\n  setSetting(setting: InsertSetting): Promise<Setting>;\n  \n  // LDAP Settings\n  getLdapSettings(): Promise<LdapSettings | undefined>;\n  createLdapSettings(settings: InsertLdapSettings): Promise<LdapSettings>;\n  updateLdapSettings(settings: Partial<InsertLdapSettings>): Promise<LdapSettings>;\n  \n  // Mail Settings\n  getMailSettings(): Promise<MailSettings | undefined>;\n  createMailSettings(settings: InsertMailSettings): Promise<MailSettings>;\n  updateMailSettings(settings: Partial<InsertMailSettings>): Promise<MailSettings>;\n  \n  // Password Reset Tokens\n  createPasswordResetToken(token: InsertPasswordResetToken): Promise<PasswordResetToken>;\n  getPasswordResetToken(token: string): Promise<PasswordResetToken | undefined>;\n  markTokenAsUsed(tokenId: string): Promise<void>;\n  cleanupExpiredTokens(): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updateUser: Partial<InsertUser>): Promise<User> {\n    const [user] = await db.update(users).set(updateUser).where(eq(users.id, id)).returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Dashboards\n  async getDashboard(id: string): Promise<Dashboard | undefined> {\n    const [dashboard] = await db.select().from(dashboards).where(eq(dashboards.id, id));\n    return dashboard || undefined;\n  }\n\n  async getDashboardsByUser(userId: string): Promise<Dashboard[]> {\n    return await db.select().from(dashboards).where(eq(dashboards.ownerId, userId));\n  }\n\n  async getAllDashboards(): Promise<Dashboard[]> {\n    return await db.select().from(dashboards);\n  }\n\n  async getPublicDashboards(): Promise<Dashboard[]> {\n    return await db.select().from(dashboards).where(eq(dashboards.isPublic, true));\n  }\n\n  async createDashboard(insertDashboard: InsertDashboard): Promise<Dashboard> {\n    const [dashboard] = await db.insert(dashboards).values(insertDashboard).returning();\n    return dashboard;\n  }\n\n  async updateDashboard(id: string, updateDashboard: Partial<InsertDashboard>): Promise<Dashboard> {\n    const [dashboard] = await db.update(dashboards).set({\n      ...updateDashboard,\n      updatedAt: new Date(),\n    }).where(eq(dashboards.id, id)).returning();\n    return dashboard;\n  }\n\n  async deleteDashboard(id: string): Promise<void> {\n    await db.delete(dashboards).where(eq(dashboards.id, id));\n  }\n\n  // Data Sources\n  async getDataSource(id: string): Promise<DataSource | undefined> {\n    const [dataSource] = await db.select().from(dataSources).where(eq(dataSources.id, id));\n    return dataSource || undefined;\n  }\n\n  async getAllDataSources(): Promise<DataSource[]> {\n    return await db.select().from(dataSources);\n  }\n\n  async createDataSource(insertDataSource: InsertDataSource): Promise<DataSource> {\n    const [dataSource] = await db.insert(dataSources).values(insertDataSource).returning();\n    return dataSource;\n  }\n\n  async updateDataSource(id: string, updateDataSource: Partial<InsertDataSource>): Promise<DataSource> {\n    const [dataSource] = await db.update(dataSources).set(updateDataSource).where(eq(dataSources.id, id)).returning();\n    return dataSource;\n  }\n\n  async deleteDataSource(id: string): Promise<void> {\n    await db.delete(dataSources).where(eq(dataSources.id, id));\n  }\n\n  // Dashboard Cards\n  async getDashboardCard(id: string): Promise<DashboardCard | undefined> {\n    const [card] = await db.select().from(dashboardCards).where(eq(dashboardCards.id, id));\n    return card || undefined;\n  }\n\n  async getCardsByDashboard(dashboardId: string): Promise<DashboardCard[]> {\n    return await db.select().from(dashboardCards).where(eq(dashboardCards.dashboardId, dashboardId));\n  }\n\n  async createDashboardCard(insertCard: InsertDashboardCard): Promise<DashboardCard> {\n    const [card] = await db.insert(dashboardCards).values(insertCard).returning();\n    return card;\n  }\n\n  async updateDashboardCard(id: string, updateCard: Partial<InsertDashboardCard>): Promise<DashboardCard> {\n    const [card] = await db.update(dashboardCards).set(updateCard).where(eq(dashboardCards.id, id)).returning();\n    return card;\n  }\n\n  async deleteDashboardCard(id: string): Promise<void> {\n    await db.delete(dashboardCards).where(eq(dashboardCards.id, id));\n  }\n\n  // Settings\n  async getSetting(key: string): Promise<Setting | undefined> {\n    const [setting] = await db.select().from(settings).where(eq(settings.key, key));\n    return setting || undefined;\n  }\n\n  async getAllSettings(): Promise<Setting[]> {\n    return await db.select().from(settings);\n  }\n\n  async setSetting(insertSetting: InsertSetting): Promise<Setting> {\n    const [setting] = await db\n      .insert(settings)\n      .values(insertSetting)\n      .onConflictDoUpdate({\n        target: settings.key,\n        set: { value: insertSetting.value, updatedAt: new Date() },\n      })\n      .returning();\n    return setting;\n  }\n\n  // LDAP Settings\n  async getLdapSettings(): Promise<LdapSettings | undefined> {\n    const [setting] = await db.select().from(ldapSettings).limit(1);\n    if (setting && setting.bindCredentials) {\n      // Decrypt the password when retrieving\n      setting.bindCredentials = decryptPassword(setting.bindCredentials);\n    }\n    return setting || undefined;\n  }\n\n  async createLdapSettings(insertLdapSettings: InsertLdapSettings): Promise<LdapSettings> {\n    // Delete any existing records to enforce single record constraint\n    await db.delete(ldapSettings);\n    \n    // Encrypt password before storing\n    if (insertLdapSettings.bindCredentials) {\n      insertLdapSettings.bindCredentials = encryptPassword(insertLdapSettings.bindCredentials);\n    }\n    \n    const [setting] = await db.insert(ldapSettings).values(insertLdapSettings).returning();\n    \n    // Decrypt password before returning\n    if (setting.bindCredentials) {\n      setting.bindCredentials = decryptPassword(setting.bindCredentials);\n    }\n    \n    return setting;\n  }\n\n  async updateLdapSettings(updateLdapSettings: Partial<InsertLdapSettings>): Promise<LdapSettings> {\n    // Encrypt password if provided\n    if (updateLdapSettings.bindCredentials) {\n      updateLdapSettings.bindCredentials = encryptPassword(updateLdapSettings.bindCredentials);\n    }\n    \n    // First, check if any LDAP settings exist\n    const existing = await db.select().from(ldapSettings).limit(1);\n    \n    if (existing.length > 0) {\n      // Update existing record\n      const [setting] = await db.update(ldapSettings)\n        .set({\n          ...updateLdapSettings,\n          updatedAt: new Date(),\n        })\n        .where(eq(ldapSettings.id, existing[0].id))\n        .returning();\n      \n      // Decrypt password before returning\n      if (setting.bindCredentials) {\n        setting.bindCredentials = decryptPassword(setting.bindCredentials);\n      }\n      \n      return setting;\n    } else {\n      // Create new record if none exists\n      return await this.createLdapSettings(updateLdapSettings as InsertLdapSettings);\n    }\n  }\n\n  // Mail Settings\n  async getMailSettings(): Promise<MailSettings | undefined> {\n    const [setting] = await db.select().from(mailSettings).limit(1);\n    if (setting && setting.authPass) {\n      // Decrypt the password when retrieving\n      setting.authPass = decryptPassword(setting.authPass);\n    }\n    return setting || undefined;\n  }\n\n  async createMailSettings(insertMailSettings: InsertMailSettings): Promise<MailSettings> {\n    // Delete any existing records to enforce single record constraint\n    await db.delete(mailSettings);\n    \n    // Encrypt password before storing\n    if (insertMailSettings.authPass) {\n      insertMailSettings.authPass = encryptPassword(insertMailSettings.authPass);\n    }\n    \n    const [setting] = await db.insert(mailSettings).values(insertMailSettings).returning();\n    \n    // Decrypt password before returning\n    if (setting.authPass) {\n      setting.authPass = decryptPassword(setting.authPass);\n    }\n    \n    return setting;\n  }\n\n  async updateMailSettings(updateMailSettings: Partial<InsertMailSettings>): Promise<MailSettings> {\n    // Encrypt password if provided\n    if (updateMailSettings.authPass) {\n      updateMailSettings.authPass = encryptPassword(updateMailSettings.authPass);\n    }\n    \n    // First, check if any mail settings exist\n    const existing = await db.select().from(mailSettings).limit(1);\n    \n    if (existing.length > 0) {\n      // Update existing record\n      const [setting] = await db.update(mailSettings)\n        .set({\n          ...updateMailSettings,\n          updatedAt: new Date(),\n        })\n        .where(eq(mailSettings.id, existing[0].id))\n        .returning();\n      \n      // Decrypt password before returning\n      if (setting.authPass) {\n        setting.authPass = decryptPassword(setting.authPass);\n      }\n      \n      return setting;\n    } else {\n      // Create new record if none exists\n      return await this.createMailSettings(updateMailSettings as InsertMailSettings);\n    }\n  }\n\n  // Password Reset Tokens\n  async createPasswordResetToken(insertToken: InsertPasswordResetToken): Promise<PasswordResetToken> {\n    const [token] = await db.insert(passwordResetTokens).values(insertToken).returning();\n    return token;\n  }\n\n  async getPasswordResetToken(tokenValue: string): Promise<PasswordResetToken | undefined> {\n    const [token] = await db.select().from(passwordResetTokens).where(\n      and(\n        eq(passwordResetTokens.token, tokenValue),\n        eq(passwordResetTokens.isUsed, false)\n      )\n    );\n    return token || undefined;\n  }\n\n  async markTokenAsUsed(tokenId: string): Promise<void> {\n    await db.update(passwordResetTokens)\n      .set({ isUsed: true })\n      .where(eq(passwordResetTokens.id, tokenId));\n  }\n\n  async cleanupExpiredTokens(): Promise<void> {\n    await db.delete(passwordResetTokens)\n      .where(lt(passwordResetTokens.expiresAt, new Date()));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14539},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, json, uuid } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\", { length: 255 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  password: text(\"password\"),\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"standard\"),\n  authMethod: varchar(\"auth_method\", { length: 50 }).notNull().default(\"local\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const dashboards = pgTable(\"dashboards\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  ownerId: uuid(\"owner_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  accessLevel: varchar(\"access_level\", { length: 50 }).notNull().default(\"private\"),\n  isPublic: boolean(\"is_public\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const dataSources = pgTable(\"data_sources\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'api', 'scraping', 'database'\n  config: json(\"config\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastPullAt: timestamp(\"last_pull_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const dashboardCards = pgTable(\"dashboard_cards\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  dashboardId: uuid(\"dashboard_id\").notNull().references(() => dashboards.id, { onDelete: \"cascade\" }),\n  dataSourceId: uuid(\"data_source_id\").references(() => dataSources.id, { onDelete: \"set null\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  visualizationType: varchar(\"visualization_type\", { length: 50 }).notNull(), // 'table', 'chart', 'graph'\n  position: json(\"position\").notNull(), // {x: number, y: number}\n  size: json(\"size\").notNull(), // {width: number, height: number}\n  config: json(\"config\").notNull(),\n  refreshInterval: integer(\"refresh_interval\").default(60), // seconds\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const settings = pgTable(\"settings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\", { length: 255 }).notNull().unique(),\n  value: json(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const ldapSettings = pgTable(\"ldap_settings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  url: varchar(\"url\", { length: 500 }).notNull().default(\"ldap://localhost:389\"),\n  baseDN: varchar(\"base_dn\", { length: 500 }).notNull().default(\"ou=users,dc=example,dc=com\"),\n  bindDN: varchar(\"bind_dn\", { length: 500 }),\n  bindCredentials: text(\"bind_credentials\"),\n  searchFilter: varchar(\"search_filter\", { length: 255 }).notNull().default(\"(uid={username})\"),\n  tlsRejectUnauthorized: boolean(\"tls_reject_unauthorized\").notNull().default(false),\n  enabled: boolean(\"enabled\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const mailSettings = pgTable(\"mail_settings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  host: varchar(\"host\", { length: 255 }).notNull().default(\"smtp.gmail.com\"),\n  port: integer(\"port\").notNull().default(587),\n  secure: boolean(\"secure\").notNull().default(false),\n  authUser: varchar(\"auth_user\", { length: 255 }).notNull().default(\"\"),\n  authPass: text(\"auth_pass\").notNull().default(\"\"),\n  fromAddress: varchar(\"from_address\", { length: 255 }).notNull().default(\"\"),\n  enabled: boolean(\"enabled\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const passwordResetTokens = pgTable(\"password_reset_tokens\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  token: varchar(\"token\", { length: 255 }).notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  isUsed: boolean(\"is_used\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const userRelations = relations(users, ({ many }) => ({\n  dashboards: many(dashboards),\n  passwordResetTokens: many(passwordResetTokens),\n}));\n\nexport const dashboardRelations = relations(dashboards, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [dashboards.ownerId],\n    references: [users.id],\n  }),\n  cards: many(dashboardCards),\n}));\n\nexport const dataSourceRelations = relations(dataSources, ({ many }) => ({\n  cards: many(dashboardCards),\n}));\n\nexport const dashboardCardRelations = relations(dashboardCards, ({ one }) => ({\n  dashboard: one(dashboards, {\n    fields: [dashboardCards.dashboardId],\n    references: [dashboards.id],\n  }),\n  dataSource: one(dataSources, {\n    fields: [dashboardCards.dataSourceId],\n    references: [dataSources.id],\n  }),\n}));\n\nexport const passwordResetTokenRelations = relations(passwordResetTokens, ({ one }) => ({\n  user: one(users, {\n    fields: [passwordResetTokens.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDashboardSchema = createInsertSchema(dashboards).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDataSourceSchema = createInsertSchema(dataSources).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDashboardCardSchema = createInsertSchema(dashboardCards).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSettingSchema = createInsertSchema(settings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertPasswordResetTokenSchema = createInsertSchema(passwordResetTokens).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLdapSettingsSchema = createInsertSchema(ldapSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMailSettingsSchema = createInsertSchema(mailSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Dashboard = typeof dashboards.$inferSelect;\nexport type InsertDashboard = z.infer<typeof insertDashboardSchema>;\nexport type DataSource = typeof dataSources.$inferSelect;\nexport type InsertDataSource = z.infer<typeof insertDataSourceSchema>;\nexport type DashboardCard = typeof dashboardCards.$inferSelect;\nexport type InsertDashboardCard = z.infer<typeof insertDashboardCardSchema>;\nexport type Setting = typeof settings.$inferSelect;\nexport type InsertSetting = z.infer<typeof insertSettingSchema>;\nexport type LdapSettings = typeof ldapSettings.$inferSelect;\nexport type InsertLdapSettings = z.infer<typeof insertLdapSettingsSchema>;\nexport type MailSettings = typeof mailSettings.$inferSelect;\nexport type InsertMailSettings = z.infer<typeof insertMailSettingsSchema>;\nexport type PasswordResetToken = typeof passwordResetTokens.$inferSelect;\nexport type InsertPasswordResetToken = z.infer<typeof insertPasswordResetTokenSchema>;\n","size_bytes":7837},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { useState } from \"react\";\nimport DashboardPage from \"@/pages/dashboard\";\nimport DataSourcesPage from \"@/pages/data-sources\";\nimport UsersPage from \"@/pages/users\";\nimport SettingsPage from \"@/pages/settings\";\nimport LoginPage from \"@/pages/login\";\nimport PasswordResetRequestPage from \"@/pages/password-reset-request\";\nimport PasswordResetPage from \"@/pages/password-reset\";\nimport NotFound from \"@/pages/not-found\";\nimport PublicDashboardPage from \"@/pages/public-dashboard\";\nimport PublicDashboardsPage from \"@/pages/public-dashboards\";\n\nfunction AppLayout({ children }: { children: React.ReactNode }) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { isAuthenticated } = useAuth();\n\n  const handleSidebarToggle = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const handleSidebarClose = () => {\n    setIsSidebarOpen(false);\n  };\n\n  if (!isAuthenticated) {\n    return <LoginPage />;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar isOpen={isSidebarOpen} onClose={handleSidebarClose} />\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {children}\n      </main>\n    </div>\n  );\n}\n\nfunction ProtectedRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={DashboardPage} />\n      <Route path=\"/data-sources\" component={DataSourcesPage} />\n      <Route path=\"/users\" component={UsersPage} />\n      <Route path=\"/settings\" component={SettingsPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Switch>\n            <Route path=\"/login\" component={LoginPage} />\n            <Route path=\"/password-reset-request\" component={PasswordResetRequestPage} />\n            <Route path=\"/password-reset\" component={PasswordResetPage} />\n            <Route path=\"/public/dashboards\" component={PublicDashboardsPage} />\n            <Route path=\"/public/dashboard/:id\" component={PublicDashboardPage} />\n            <Route>\n              <AppLayout>\n                <ProtectedRouter />\n              </AppLayout>\n            </Route>\n          </Switch>\n          <Toaster />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2688},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 46%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 47%, 11%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 4.9%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222, 47%, 11%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 2px 4px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 4px 6px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 8px 10px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(224, 71%, 4%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(222, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 2px 4px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 4px 6px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 8px 10px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: Inter, system-ui, sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n}\n\n/* Dashboard Canvas Styling */\n.dashboard-canvas {\n  background-image: radial-gradient(circle, hsl(var(--muted)) 1px, transparent 1px);\n  background-size: 20px 20px;\n  position: relative;\n  min-height: 600px;\n}\n\n/* Draggable Card Styling */\n.draggable-card {\n  cursor: move;\n  transition: all 0.2s ease;\n}\n\n.draggable-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.dark .draggable-card:hover {\n  box-shadow: 0 10px 25px -5px rgba(255, 255, 255, 0.1), 0 10px 10px -5px rgba(255, 255, 255, 0.04);\n}\n\n/* Chart Container */\n.chart-container {\n  position: relative;\n  height: 200px;\n  width: 100%;\n}\n\n/* Sidebar Navigation */\n.sidebar-nav {\n  transition: transform 0.3s ease-in-out;\n}\n\n@media (max-width: 768px) {\n  .sidebar-nav.closed {\n    transform: translateX(-100%);\n  }\n}\n\n/* Custom scrollbar for webkit browsers */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground) / 0.3);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground) / 0.5);\n}\n\n/* Animation keyframes */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInFromLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n/* Utility classes for animations */\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n\n.animate-slide-in-left {\n  animation: slideInFromLeft 0.3s ease-out;\n}\n\n.animate-pulse-slow {\n  animation: pulse 2s infinite;\n}\n\n/* Card hover effects */\n.card-hover {\n  transition: all 0.2s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px -2px rgba(0, 0, 0, 0.1);\n}\n\n.dark .card-hover:hover {\n  box-shadow: 0 4px 12px -2px rgba(255, 255, 255, 0.1);\n}\n\n/* Status indicator styles */\n.status-indicator {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.status-indicator::before {\n  content: '';\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background-color: currentColor;\n  opacity: 0.8;\n}\n\n/* Form focus styles */\n.form-input {\n  transition: all 0.2s ease;\n}\n\n.form-input:focus {\n  outline: none;\n  ring: 2px;\n  ring-color: hsl(var(--ring));\n  border-color: hsl(var(--ring));\n}\n\n/* Button styles */\n.btn-primary {\n  background-color: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n  border: none;\n  transition: all 0.2s ease;\n}\n\n.btn-primary:hover {\n  background-color: hsl(var(--primary) / 0.9);\n}\n\n.btn-secondary {\n  background-color: hsl(var(--secondary));\n  color: hsl(var(--secondary-foreground));\n  border: none;\n  transition: all 0.2s ease;\n}\n\n.btn-secondary:hover {\n  background-color: hsl(var(--secondary) / 0.8);\n}\n\n/* Loading spinner */\n.spinner {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n/* Data visualization styles */\n.chart-tooltip {\n  background-color: hsl(var(--card));\n  border: 1px solid hsl(var(--border));\n  border-radius: var(--radius);\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  padding: 0.5rem;\n  color: hsl(var(--card-foreground));\n}\n\n/* Error state styles */\n.error-state {\n  color: hsl(var(--destructive));\n  background-color: hsl(var(--destructive) / 0.1);\n  border: 1px solid hsl(var(--destructive) / 0.2);\n  border-radius: var(--radius);\n  padding: 1rem;\n}\n\n/* Success state styles */\n.success-state {\n  color: hsl(var(--chart-2));\n  background-color: hsl(var(--chart-2) / 0.1);\n  border: 1px solid hsl(var(--chart-2) / 0.2);\n  border-radius: var(--radius);\n  padding: 1rem;\n}\n\n/* Dark mode specific adjustments */\n.dark .dashboard-canvas {\n  background-image: radial-gradient(circle, hsl(var(--muted) / 0.5) 1px, transparent 1px);\n}\n\n/* Responsive design helpers */\n@media (max-width: 640px) {\n  .dashboard-canvas {\n    background-size: 15px 15px;\n  }\n}\n\n/* Print styles */\n@media print {\n  .sidebar-nav,\n  .no-print {\n    display: none !important;\n  }\n  \n  .dashboard-canvas {\n    background: none !important;\n  }\n}\n","size_bytes":8748},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { authApi, type AuthUser } from \"@/lib/auth\";\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  isLoading: boolean;\n  login: (identifier: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const queryClient = useQueryClient();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const { data: authData, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => authApi.me(),\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const user = authData?.user || null;\n\n  useEffect(() => {\n    setIsAuthenticated(!!user);\n  }, [user]);\n\n  const loginMutation = useMutation({\n    mutationFn: ({ identifier, password }: { identifier: string; password: string }) =>\n      authApi.login({ identifier, password }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: authApi.logout,\n    onSuccess: () => {\n      queryClient.clear();\n      setIsAuthenticated(false);\n    },\n  });\n\n  const login = async (identifier: string, password: string) => {\n    await loginMutation.mutateAsync({ identifier, password });\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        login,\n        logout,\n        isAuthenticated,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2019},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface AuthUser {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n}\n\nexport interface LoginRequest {\n  identifier: string;\n  password: string;\n}\n\nexport const authApi = {\n  login: async (credentials: LoginRequest): Promise<{ user: AuthUser }> => {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n    return response.json();\n  },\n\n  logout: async (): Promise<void> => {\n    await apiRequest(\"POST\", \"/api/auth/logout\");\n  },\n\n  me: async (): Promise<{ user: AuthUser }> => {\n    const response = await apiRequest(\"GET\", \"/api/auth/me\");\n    return response.json();\n  },\n};\n","size_bytes":677},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { DashboardCanvas } from \"@/components/dashboard/dashboard-canvas\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { BarChart3, Users, Server, Edit, Trash2, Globe, Lock, Copy, ExternalLink } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Dashboard } from \"@shared/schema\";\n\nexport default function DashboardPage() {\n  const [selectedDashboard, setSelectedDashboard] = useState<Dashboard | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingDashboard, setEditingDashboard] = useState<Dashboard | null>(null);\n  const [dashboardName, setDashboardName] = useState(\"\");\n  const [dashboardDescription, setDashboardDescription] = useState(\"\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: dashboards = [], isLoading } = useQuery({\n    queryKey: [\"/api/dashboards\"],\n  });\n\n  const createDashboardMutation = useMutation({\n    mutationFn: (data: { name: string; description?: string }) =>\n      apiRequest(\"POST\", \"/api/dashboards\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Dashboard created\",\n        description: \"Your dashboard has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboards\"] });\n      setIsCreateDialogOpen(false);\n      setDashboardName(\"\");\n      setDashboardDescription(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to create dashboard\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateDashboardMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: { name: string; description?: string; isPublic?: boolean } }) =>\n      apiRequest(\"PUT\", `/api/dashboards/${id}`, data),\n    onSuccess: () => {\n      toast({\n        title: \"Dashboard updated\",\n        description: \"Your dashboard has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboards\"] });\n      setIsEditDialogOpen(false);\n      setEditingDashboard(null);\n      setDashboardName(\"\");\n      setDashboardDescription(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update dashboard\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDashboardMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/dashboards/${id}`),\n    onSuccess: () => {\n      toast({\n        title: \"Dashboard deleted\",\n        description: \"Your dashboard has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboards\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to delete dashboard\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const togglePublicMutation = useMutation({\n    mutationFn: ({ id, isPublic }: { id: string; isPublic: boolean }) =>\n      apiRequest(\"PUT\", `/api/dashboards/${id}`, { isPublic }),\n    onSuccess: () => {\n      toast({\n        title: \"Dashboard visibility updated\",\n        description: \"Dashboard visibility has been changed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboards\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update dashboard\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateDashboard = () => {\n    setIsCreateDialogOpen(true);\n  };\n\n  const handleOpenDashboard = (dashboard: Dashboard) => {\n    setSelectedDashboard(dashboard);\n  };\n\n  const handleBackToDashboards = () => {\n    setSelectedDashboard(null);\n  };\n\n  const handleFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!dashboardName.trim()) {\n      toast({\n        title: \"Validation error\",\n        description: \"Dashboard name is required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createDashboardMutation.mutate({\n      name: dashboardName.trim(),\n      description: dashboardDescription.trim() || undefined,\n    });\n  };\n\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingDashboard || !dashboardName.trim()) {\n      toast({\n        title: \"Validation error\",\n        description: \"Dashboard name is required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateDashboardMutation.mutate({\n      id: editingDashboard.id,\n      data: {\n        name: dashboardName.trim(),\n        description: dashboardDescription.trim() || undefined,\n      },\n    });\n  };\n\n  const handleEditDashboard = (dashboard: Dashboard) => {\n    setEditingDashboard(dashboard);\n    setDashboardName(dashboard.name);\n    setDashboardDescription(dashboard.description || \"\");\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteDashboard = async (dashboard: Dashboard) => {\n    const confirmed = confirm(\n      `Are you sure you want to delete \"${dashboard.name}\"? This action cannot be undone.`\n    );\n    if (confirmed) {\n      deleteDashboardMutation.mutate(dashboard.id);\n    }\n  };\n\n  const handleTogglePublic = (dashboard: Dashboard) => {\n    togglePublicMutation.mutate({\n      id: dashboard.id,\n      isPublic: !dashboard.isPublic,\n    });\n  };\n\n  if (selectedDashboard) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <TopBar \n          title={`${selectedDashboard.name} - Edit Mode`}\n          onSidebarToggle={() => {}}\n          showCreateButton={true}\n          onCreateClick={() => {}}\n          createButtonText=\"Add Card\"\n        />\n        <DashboardCanvas \n          dashboard={selectedDashboard}\n          onBack={handleBackToDashboards}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <TopBar \n        title=\"Dashboard Overview\"\n        onSidebarToggle={() => {}}\n        showCreateButton={true}\n        onCreateClick={handleCreateDashboard}\n        createButtonText=\"New Dashboard\"\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (dashboards as Dashboard[]).length === 0 ? (\n          <div className=\"text-center py-12\">\n            <BarChart3 className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">No dashboards yet</h3>\n            <p className=\"text-muted-foreground mb-4\">Create your first dashboard to get started</p>\n            <Button onClick={handleCreateDashboard} data-testid=\"button-create-first-dashboard\">\n              Create Dashboard\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {(dashboards as Dashboard[]).map((dashboard: Dashboard) => (\n              <Card \n                key={dashboard.id} \n                className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                onClick={() => handleOpenDashboard(dashboard)}\n                data-testid={`card-dashboard-${dashboard.id}`}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <BarChart3 className=\"text-primary w-6 h-6\" />\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"text-muted-foreground hover:text-foreground p-1\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleEditDashboard(dashboard);\n                        }}\n                        data-testid={`button-edit-dashboard-${dashboard.id}`}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"text-muted-foreground hover:text-destructive p-1\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleDeleteDashboard(dashboard);\n                        }}\n                        data-testid={`button-delete-dashboard-${dashboard.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid={`text-dashboard-name-${dashboard.id}`}>\n                    {dashboard.name}\n                  </h3>\n                  <p className=\"text-muted-foreground text-sm mb-4\" data-testid={`text-dashboard-description-${dashboard.id}`}>\n                    {dashboard.description || \"No description\"}\n                  </p>\n                  <div className=\"flex items-center justify-between text-sm mb-3\">\n                    <span className=\"text-muted-foreground\">\n                      {(dashboard as any).cardCount || 0} {(dashboard as any).cardCount === 1 ? 'card' : 'cards'}\n                    </span>\n                    <span className=\"text-muted-foreground\">\n                      {new Date(dashboard.updatedAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        {dashboard.isPublic ? (\n                          <div className=\"flex items-center text-xs text-chart-2\">\n                            <Globe className=\"w-3 h-3 mr-1\" />\n                            Public\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center text-xs text-muted-foreground\">\n                            <Lock className=\"w-3 h-3 mr-1\" />\n                            Private\n                          </div>\n                        )}\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-xs text-muted-foreground hover:text-foreground p-1 h-6\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleTogglePublic(dashboard);\n                        }}\n                        data-testid={`button-toggle-public-${dashboard.id}`}\n                      >\n                        {dashboard.isPublic ? \"Make Private\" : \"Make Public\"}\n                      </Button>\n                    </div>\n                    {dashboard.isPublic && (\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-xs text-muted-foreground hover:text-foreground px-2 h-6 flex-1\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            const publicUrl = `${window.location.origin}/public/dashboard/${dashboard.id}`;\n                            navigator.clipboard.writeText(publicUrl);\n                            toast({\n                              title: \"Link copied!\",\n                              description: \"Public dashboard link copied to clipboard.\",\n                            });\n                          }}\n                          data-testid={`button-copy-link-${dashboard.id}`}\n                        >\n                          <Copy className=\"w-3 h-3 mr-1\" />\n                          Copy Link\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-xs text-muted-foreground hover:text-foreground px-2 h-6 flex-1\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            const publicUrl = `${window.location.origin}/public/dashboard/${dashboard.id}`;\n                            window.open(publicUrl, '_blank');\n                          }}\n                          data-testid={`button-open-public-${dashboard.id}`}\n                        >\n                          <ExternalLink className=\"w-3 h-3 mr-1\" />\n                          Open\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Create New Dashboard</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleFormSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dashboardName\">Dashboard Name</Label>\n              <Input \n                id=\"dashboardName\" \n                placeholder=\"My Dashboard\" \n                value={dashboardName}\n                onChange={(e) => setDashboardName(e.target.value)}\n                data-testid=\"input-dashboard-name\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dashboardDescription\">Description</Label>\n              <Textarea \n                id=\"dashboardDescription\" \n                placeholder=\"Dashboard description...\" \n                value={dashboardDescription}\n                onChange={(e) => setDashboardDescription(e.target.value)}\n                data-testid=\"textarea-dashboard-description\"\n              />\n            </div>\n            <div className=\"flex space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => setIsCreateDialogOpen(false)}\n                data-testid=\"button-cancel-dashboard\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={createDashboardMutation.isPending || !dashboardName.trim()}\n                data-testid=\"button-submit-dashboard\"\n              >\n                {createDashboardMutation.isPending ? \"Creating...\" : \"Create Dashboard\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Dashboard</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleEditSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"editDashboardName\">Dashboard Name</Label>\n              <Input \n                id=\"editDashboardName\" \n                placeholder=\"My Dashboard\" \n                value={dashboardName}\n                onChange={(e) => setDashboardName(e.target.value)}\n                data-testid=\"input-edit-dashboard-name\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"editDashboardDescription\">Description</Label>\n              <Textarea \n                id=\"editDashboardDescription\" \n                placeholder=\"Dashboard description...\" \n                value={dashboardDescription}\n                onChange={(e) => setDashboardDescription(e.target.value)}\n                data-testid=\"textarea-edit-dashboard-description\"\n              />\n            </div>\n            <div className=\"flex space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => {\n                  setIsEditDialogOpen(false);\n                  setEditingDashboard(null);\n                  setDashboardName(\"\");\n                  setDashboardDescription(\"\");\n                }}\n                data-testid=\"button-cancel-edit-dashboard\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={updateDashboardMutation.isPending || !dashboardName.trim()}\n                data-testid=\"button-submit-edit-dashboard\"\n              >\n                {updateDashboardMutation.isPending ? \"Updating...\" : \"Update Dashboard\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":18277},"client/src/pages/data-sources.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { DataSourceForm } from \"@/components/forms/data-source-form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Link, Database, Globe, Play, Square, Edit, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { DataSource } from \"@shared/schema\";\n\nconst dataSourceIcons = {\n  api: Link,\n  scraping: Globe,\n  database: Database,\n};\n\nexport default function DataSourcesPage() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedDataSource, setSelectedDataSource] = useState<DataSource | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: dataSources = [], isLoading } = useQuery({\n    queryKey: [\"/api/data-sources\"],\n  });\n\n  const toggleDataSourceMutation = useMutation({\n    mutationFn: (data: { id: string; isActive: boolean }) => \n      apiRequest(\"PUT\", `/api/data-sources/${data.id}`, { isActive: data.isActive }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/data-sources\"] });\n      toast({\n        title: \"Data source updated\",\n        description: \"Status changed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update data source\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDataSourceMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/data-sources/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/data-sources\"] });\n      toast({\n        title: \"Data source deleted\",\n        description: \"Data source has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to delete data source\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateDataSource = () => {\n    setIsCreateDialogOpen(true);\n  };\n\n  const handleEditDataSource = (dataSource: DataSource) => {\n    setSelectedDataSource(dataSource);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleToggleDataSource = (dataSource: DataSource) => {\n    toggleDataSourceMutation.mutate({\n      id: dataSource.id,\n      isActive: !dataSource.isActive,\n    });\n  };\n\n  const handleDeleteDataSource = (dataSource: DataSource) => {\n    if (window.confirm(`Are you sure you want to delete \"${dataSource.name}\"?`)) {\n      deleteDataSourceMutation.mutate(dataSource.id);\n    }\n  };\n\n  const getStatusColor = (isActive: boolean) => {\n    return isActive ? \"text-chart-2\" : \"text-muted-foreground\";\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <TopBar \n        title=\"Data Sources\"\n        onSidebarToggle={() => {}}\n        showCreateButton={true}\n        onCreateClick={handleCreateDataSource}\n        createButtonText=\"Add Data Source\"\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-muted rounded w-3/4 mb-4\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (dataSources as DataSource[]).length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Database className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">No data sources configured</h3>\n            <p className=\"text-muted-foreground mb-4\">Add your first data source to start building dashboards</p>\n            <Button onClick={handleCreateDataSource} data-testid=\"button-create-first-data-source\">\n              Add Data Source\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            {(dataSources as DataSource[]).map((dataSource: DataSource) => {\n              const IconComponent = dataSourceIcons[dataSource.type as keyof typeof dataSourceIcons] || Database;\n              \n              return (\n                <Card key={dataSource.id} data-testid={`card-data-source-${dataSource.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <IconComponent className=\"w-5 h-5 text-primary\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-foreground\" data-testid={`text-data-source-name-${dataSource.id}`}>\n                            {dataSource.name}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground capitalize\" data-testid={`text-data-source-type-${dataSource.id}`}>\n                            {dataSource.type}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className={`p-1 ${\n                            dataSource.isActive \n                              ? \"text-chart-2 hover:text-chart-2/80\" \n                              : \"text-muted-foreground hover:text-foreground\"\n                          }`}\n                          onClick={() => handleToggleDataSource(dataSource)}\n                          disabled={toggleDataSourceMutation.isPending}\n                          title={dataSource.isActive ? \"Stop data source\" : \"Start data source\"}\n                          data-testid={`button-toggle-data-source-${dataSource.id}`}\n                        >\n                          {dataSource.isActive ? (\n                            <Square className=\"w-4 h-4\" />\n                          ) : (\n                            <Play className=\"w-4 h-4\" />\n                          )}\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"text-muted-foreground hover:text-foreground p-1\"\n                          onClick={() => handleEditDataSource(dataSource)}\n                          data-testid={`button-edit-data-source-${dataSource.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"text-muted-foreground hover:text-destructive p-1\"\n                          onClick={() => handleDeleteDataSource(dataSource)}\n                          disabled={deleteDataSourceMutation.isPending}\n                          data-testid={`button-delete-data-source-${dataSource.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Status:</span>\n                        <span className={`flex items-center ${getStatusColor(dataSource.isActive)}`}>\n                          <div className=\"w-2 h-2 bg-current rounded-full mr-1\"></div>\n                          {dataSource.isActive ? \"Connected\" : \"Disconnected\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Last Pull:</span>\n                        <span className=\"text-foreground\">\n                          {dataSource.lastPullAt \n                            ? new Date(dataSource.lastPullAt).toLocaleString()\n                            : \"Never\"\n                          }\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Created:</span>\n                        <span className=\"text-foreground\">\n                          {new Date(dataSource.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"sm:max-w-2xl max-h-[90vh] flex flex-col\">\n          <DialogHeader>\n            <DialogTitle>Add Data Source</DialogTitle>\n          </DialogHeader>\n          <div className=\"flex-1 overflow-y-auto pr-2\">\n            <DataSourceForm \n              onSuccess={() => setIsCreateDialogOpen(false)}\n              onCancel={() => setIsCreateDialogOpen(false)}\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-2xl max-h-[90vh] flex flex-col\">\n          <DialogHeader>\n            <DialogTitle>Edit Data Source</DialogTitle>\n          </DialogHeader>\n          <div className=\"flex-1 overflow-y-auto pr-2\">\n            <DataSourceForm \n              dataSource={selectedDataSource}\n              onSuccess={() => setIsEditDialogOpen(false)}\n              onCancel={() => setIsEditDialogOpen(false)}\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":10680},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { BarChart3, Building, Eye } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [identifier, setIdentifier] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(identifier, password);\n      setLocation(\"/\");\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to DataBoard!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl\">\n        <CardHeader className=\"text-center pb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <BarChart3 className=\"text-primary-foreground w-8 h-8\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Welcome to DataBoard</h1>\n          <p className=\"text-muted-foreground mt-2\">Sign in to access your dashboards</p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"identifier\" className=\"text-sm font-medium text-foreground\">\n                Email or Username\n              </Label>\n              <Input\n                id=\"identifier\"\n                type=\"text\"\n                placeholder=\"admin@example.com\"\n                value={identifier}\n                onChange={(e) => setIdentifier(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-identifier\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-foreground\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-password\"\n                required\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id=\"remember\" data-testid=\"checkbox-remember\" />\n                <Label htmlFor=\"remember\" className=\"text-sm text-muted-foreground\">\n                  Remember me\n                </Label>\n              </div>\n              <Link href=\"/password-reset-request\" className=\"text-sm text-primary hover:underline\" data-testid=\"link-forgot-password\">\n                Forgot password?\n              </Link>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 pt-6 border-t border-border\">\n            <div className=\"text-center space-y-3\">\n              \n              <div className=\"pt-3\">\n                <p className=\"text-sm text-muted-foreground mb-3\">Or browse without signing in</p>\n                <Link href=\"/public/dashboards\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    data-testid=\"button-view-public\"\n                  >\n                    <Eye className=\"w-4 h-4 mr-2\" />\n                    View Public Dashboards\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4777},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Server, Shield, Database, Save, TestTube, CheckCircle, AlertCircle, Eye, Mail } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface LDAPSettings {\n  url: string;\n  baseDN: string;\n  bindDN: string;\n  bindCredentials: string;\n  searchFilter: string;\n  tlsOptions: {\n    rejectUnauthorized: boolean;\n  };\n}\n\ninterface AccessSettings {\n  defaultAccess: string;\n  allowPublicView: boolean;\n  requirePublicAuth: boolean;\n  sessionTimeout: number;\n}\n\ninterface MailSettings {\n  host: string;\n  port: number;\n  secure: boolean;\n  auth: {\n    user: string;\n    pass: string;\n  };\n  from: string;\n  enabled: boolean;\n}\n\nexport default function SettingsPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const isAdmin = user?.role === \"admin\";\n  \n  const [ldapSettings, setLdapSettings] = useState<LDAPSettings>({\n    url: \"ldap://localhost:389\",\n    baseDN: \"ou=users,dc=example,dc=com\",\n    bindDN: \"cn=admin,dc=example,dc=com\",\n    bindCredentials: \"\",\n    searchFilter: \"(uid={username})\",\n    tlsOptions: {\n      rejectUnauthorized: false,\n    },\n  });\n\n  const [ldapTestStatus, setLdapTestStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle');\n  const [ldapTestMessage, setLdapTestMessage] = useState('');\n  const [ldapEnabled, setLdapEnabled] = useState(false);\n\n  const [accessSettings, setAccessSettings] = useState<AccessSettings>({\n    defaultAccess: \"standard\",\n    allowPublicView: true,\n    requirePublicAuth: false,\n    sessionTimeout: 60,\n  });\n\n  const [mailSettings, setMailSettings] = useState<MailSettings>({\n    host: \"smtp.gmail.com\",\n    port: 587,\n    secure: false,\n    auth: {\n      user: \"\",\n      pass: \"\",\n    },\n    from: \"noreply@example.com\",\n    enabled: false,\n  });\n\n  const [mailTestStatus, setMailTestStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle');\n  const [mailTestMessage, setMailTestMessage] = useState('');\n\n  // Fetch LDAP settings from dedicated endpoint\n  const { data: ldapSettingsData } = useQuery({\n    queryKey: [\"/api/settings/ldap\"],\n  });\n\n  // Fetch Mail settings from dedicated endpoint\n  const { data: mailSettingsData } = useQuery({\n    queryKey: [\"/api/settings/mail\"],\n  });\n\n  // Fetch general settings (for access settings)\n  const { data: settings = [], isLoading } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  // Update LDAP settings when data changes\n  useState(() => {\n    if (ldapSettingsData && typeof ldapSettingsData === 'object') {\n      setLdapSettings({\n        url: (ldapSettingsData as any).url || \"\",\n        baseDN: (ldapSettingsData as any).baseDN || \"\",\n        bindDN: (ldapSettingsData as any).bindDN || \"\",\n        bindCredentials: (ldapSettingsData as any).bindCredentials || \"\",\n        searchFilter: (ldapSettingsData as any).searchFilter || \"\",\n        tlsOptions: {\n          rejectUnauthorized: (ldapSettingsData as any).tlsRejectUnauthorized || false,\n        },\n      });\n      setLdapEnabled((ldapSettingsData as any).enabled || false);\n    }\n  });\n\n  // Update Mail settings when data changes\n  useState(() => {\n    if (mailSettingsData && typeof mailSettingsData === 'object') {\n      setMailSettings({\n        host: (mailSettingsData as any).host || \"\",\n        port: (mailSettingsData as any).port || 587,\n        secure: (mailSettingsData as any).secure || false,\n        auth: {\n          user: (mailSettingsData as any).authUser || \"\",\n          pass: (mailSettingsData as any).authPass || \"\",\n        },\n        from: (mailSettingsData as any).fromAddress || \"\",\n        enabled: (mailSettingsData as any).enabled || false,\n      });\n    }\n  });\n\n  // Parse general settings when data changes (for access settings)\n  useState(() => {\n    if (settings && Array.isArray(settings)) {\n      (settings as any[]).forEach((setting: any) => {\n        if (setting.key === \"access\") {\n          setAccessSettings(setting.value);\n        }\n      });\n    }\n  });\n\n  const testLdapMutation = useMutation({\n    mutationFn: (credentials: { username: string; password: string }) =>\n      apiRequest(\"POST\", \"/api/auth/test-ldap\", { \n        ...credentials, \n        config: ldapSettings \n      }),\n    onMutate: () => {\n      setLdapTestStatus('testing');\n      setLdapTestMessage('Testing connection...');\n    },\n    onSuccess: (data: any) => {\n      setLdapTestStatus('success');\n      setLdapTestMessage(data.message || 'Connection test successful!');\n      toast({\n        title: \"LDAP Test Successful\",\n        description: \"LDAP configuration is working correctly.\",\n      });\n    },\n    onError: (error: any) => {\n      setLdapTestStatus('error');\n      setLdapTestMessage(error.message || 'Connection test failed');\n      toast({\n        title: \"LDAP Test Failed\",\n        description: \"Please check your configuration and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveLdapMutation = useMutation({\n    mutationFn: async (settings: LDAPSettings) => {\n      // Transform frontend format to backend format\n      const dbFormat = {\n        url: settings.url,\n        baseDN: settings.baseDN,\n        bindDN: settings.bindDN,\n        bindCredentials: settings.bindCredentials,\n        searchFilter: settings.searchFilter,\n        tlsRejectUnauthorized: settings.tlsOptions.rejectUnauthorized,\n        enabled: ldapEnabled,\n      };\n      return await apiRequest(\"POST\", \"/api/settings/ldap\", dbFormat);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"LDAP settings saved\",\n        description: \"LDAP configuration has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/ldap\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to save LDAP settings\",\n        description: \"Please check your configuration and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveAccessMutation = useMutation({\n    mutationFn: (settings: AccessSettings) =>\n      apiRequest(\"POST\", \"/api/settings\", { key: \"access\", value: settings }),\n    onSuccess: () => {\n      toast({\n        title: \"Access settings saved\",\n        description: \"Dashboard access configuration has been updated.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to save access settings\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testMailMutation = useMutation({\n    mutationFn: (testEmail: string) =>\n      apiRequest(\"POST\", \"/api/settings/test-mail\", { \n        config: mailSettings,\n        testEmail\n      }),\n    onMutate: () => {\n      setMailTestStatus('testing');\n      setMailTestMessage('Sending test email...');\n    },\n    onSuccess: (data: any) => {\n      setMailTestStatus('success');\n      setMailTestMessage(data.message || 'Test email sent successfully!');\n      toast({\n        title: \"Mail Test Successful\",\n        description: \"Test email sent successfully. Check your inbox.\",\n      });\n    },\n    onError: (error: any) => {\n      setMailTestStatus('error');\n      setMailTestMessage(error.message || 'Failed to send test email');\n      toast({\n        title: \"Mail Test Failed\",\n        description: \"Please check your configuration and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveMailMutation = useMutation({\n    mutationFn: (settings: MailSettings) => {\n      // Transform frontend format to backend format\n      const dbFormat = {\n        host: settings.host,\n        port: settings.port,\n        secure: settings.secure,\n        authUser: settings.auth.user,\n        authPass: settings.auth.pass,\n        fromAddress: settings.from,\n        enabled: settings.enabled,\n      };\n      return apiRequest(\"POST\", \"/api/settings/mail\", dbFormat);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Mail settings saved\",\n        description: \"Email configuration has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/mail\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to save mail settings\",\n        description: \"Please check your configuration and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTestLdap = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!ldapEnabled) {\n      toast({\n        title: \"LDAP Disabled\",\n        description: \"Please enable LDAP configuration before testing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    // For testing purposes, use default test credentials\n    testLdapMutation.mutate({ username: 'testuser', password: 'testpass' });\n  };\n\n  const handleSaveLdap = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // If LDAP is disabled, save the disabled state and deactivate LDAP users\n    if (!ldapEnabled) {\n      try {\n        const dbFormat = {\n          url: ldapSettings.url,\n          baseDN: ldapSettings.baseDN,\n          bindDN: ldapSettings.bindDN,\n          bindCredentials: ldapSettings.bindCredentials,\n          searchFilter: ldapSettings.searchFilter,\n          tlsRejectUnauthorized: ldapSettings.tlsOptions.rejectUnauthorized,\n          enabled: false,\n        };\n        await apiRequest(\"POST\", \"/api/settings/ldap\", dbFormat);\n        await apiRequest(\"POST\", \"/api/users/deactivate-ldap\");\n        toast({\n          title: \"LDAP settings saved\",\n          description: \"LDAP authentication has been disabled and LDAP users have been deactivated.\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/settings/ldap\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      } catch (error) {\n        toast({\n          title: \"Failed to save LDAP settings\",\n          description: \"Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n      return;\n    }\n    \n    if (ldapTestStatus !== 'success') {\n      toast({\n        title: \"Test Required\",\n        description: \"Please test the LDAP connection before saving settings.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    saveLdapMutation.mutate(ldapSettings);\n  };\n\n  const handleSaveAccess = (e: React.FormEvent) => {\n    e.preventDefault();\n    saveAccessMutation.mutate(accessSettings);\n  };\n\n  const handleTestMail = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!mailSettings.enabled) {\n      toast({\n        title: \"Mail Disabled\",\n        description: \"Please enable mail configuration before testing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    const testEmail = prompt(\"Enter an email address to send a test email to:\");\n    if (testEmail && /\\S+@\\S+\\.\\S+/.test(testEmail)) {\n      testMailMutation.mutate(testEmail);\n    } else {\n      toast({\n        title: \"Invalid Email\",\n        description: \"Please enter a valid email address.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSaveMail = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!mailSettings.enabled) {\n      // Just save disabled state\n      saveMailMutation.mutate(mailSettings);\n      return;\n    }\n    \n    if (mailTestStatus !== 'success') {\n      toast({\n        title: \"Test Required\",\n        description: \"Please test the mail configuration before saving settings.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    saveMailMutation.mutate(mailSettings);\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <TopBar \n        title=\"System Settings\"\n        onSidebarToggle={() => {}}\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {!isAdmin && (\n          <div className=\"bg-blue-100 dark:bg-blue-900 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Eye className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n              <span className=\"text-sm font-medium text-blue-800 dark:text-blue-300\">Read-Only View</span>\n            </div>\n            <p className=\"text-sm text-blue-700 dark:text-blue-400 mt-1\">\n              You can view system settings but cannot modify them. Contact your administrator to make changes.\n            </p>\n          </div>\n        )}\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Mail Configuration */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"w-5 h-5 mr-2 text-primary\" />\n                Email Configuration\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Mail Enable Toggle */}\n                <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-base font-medium\">Enable Email Sending</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enable SMTP email functionality for password resets and notifications.\n                    </p>\n                  </div>\n                  <Switch\n                    checked={mailSettings.enabled}\n                    onCheckedChange={(enabled) => {\n                      setMailSettings(prev => ({ ...prev, enabled }));\n                      if (enabled) {\n                        setMailTestStatus('idle');\n                        setMailTestMessage('');\n                      }\n                    }}\n                    disabled={!isAdmin}\n                    data-testid=\"switch-mail-enabled\"\n                  />\n                </div>\n                \n                <form onSubmit={handleSaveMail} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"mailHost\">SMTP Host</Label>\n                      <Input\n                        id=\"mailHost\"\n                        type=\"text\"\n                        placeholder=\"smtp.gmail.com\"\n                        value={mailSettings.host}\n                        onChange={(e) => setMailSettings(prev => ({ ...prev, host: e.target.value }))}\n                        disabled={!isAdmin || !mailSettings.enabled}\n                        data-testid=\"input-mail-host\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"mailPort\">SMTP Port</Label>\n                      <Input\n                        id=\"mailPort\"\n                        type=\"number\"\n                        placeholder=\"587\"\n                        value={mailSettings.port}\n                        onChange={(e) => setMailSettings(prev => ({ ...prev, port: parseInt(e.target.value) || 587 }))}\n                        disabled={!isAdmin || !mailSettings.enabled}\n                        data-testid=\"input-mail-port\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"mailUser\">Username</Label>\n                    <Input\n                      id=\"mailUser\"\n                      type=\"text\"\n                      placeholder=\"your-email@example.com\"\n                      value={mailSettings.auth.user}\n                      onChange={(e) => setMailSettings(prev => ({ ...prev, auth: { ...prev.auth, user: e.target.value } }))}\n                      disabled={!isAdmin || !mailSettings.enabled}\n                      data-testid=\"input-mail-user\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"mailPass\">Password</Label>\n                    <Input\n                      id=\"mailPass\"\n                      type=\"password\"\n                      placeholder=\"••••••••••••\"\n                      value={mailSettings.auth.pass}\n                      onChange={(e) => setMailSettings(prev => ({ ...prev, auth: { ...prev.auth, pass: e.target.value } }))}\n                      disabled={!isAdmin || !mailSettings.enabled}\n                      data-testid=\"input-mail-pass\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"mailFrom\">From Address</Label>\n                    <Input\n                      id=\"mailFrom\"\n                      type=\"email\"\n                      placeholder=\"noreply@yourcompany.com\"\n                      value={mailSettings.from}\n                      onChange={(e) => setMailSettings(prev => ({ ...prev, from: e.target.value }))}\n                      disabled={!isAdmin || !mailSettings.enabled}\n                      data-testid=\"input-mail-from\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"mailSecure\"\n                      checked={mailSettings.secure}\n                      onCheckedChange={(checked) => \n                        setMailSettings(prev => ({ ...prev, secure: !!checked }))\n                      }\n                      disabled={!isAdmin || !mailSettings.enabled}\n                      data-testid=\"checkbox-mail-secure\"\n                    />\n                    <Label htmlFor=\"mailSecure\">Use SSL/TLS (Port 465)</Label>\n                  </div>\n\n                  {/* Test Mail Status */}\n                  {mailTestStatus !== 'idle' && (\n                    <div className={`flex items-center space-x-2 p-3 rounded-lg ${\n                      mailTestStatus === 'success' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :\n                      mailTestStatus === 'error' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300' :\n                      'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'\n                    }`}>\n                      {mailTestStatus === 'success' && <CheckCircle className=\"w-4 h-4\" />}\n                      {mailTestStatus === 'error' && <AlertCircle className=\"w-4 h-4\" />}\n                      {mailTestStatus === 'testing' && <TestTube className=\"w-4 h-4 animate-pulse\" />}\n                      <span className=\"text-sm\">{mailTestMessage}</span>\n                    </div>\n                  )}\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <Button \n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleTestMail}\n                      disabled={!isAdmin || !mailSettings.enabled || testMailMutation.isPending}\n                      data-testid=\"button-test-mail\"\n                    >\n                      <TestTube className=\"w-4 h-4 mr-2\" />\n                      {testMailMutation.isPending ? \"Testing...\" : \"Send Test Email\"}\n                    </Button>\n                    \n                    <Button \n                      type=\"submit\" \n                      disabled={!isAdmin || (mailSettings.enabled && mailTestStatus !== 'success') || saveMailMutation.isPending}\n                      data-testid=\"button-save-mail\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      {saveMailMutation.isPending ? \"Saving...\" : \"Save Mail Settings\"}\n                    </Button>\n                  </div>\n                </form>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* LDAP Configuration */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Server className=\"w-5 h-5 mr-2 text-primary\" />\n                LDAP Configuration\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* LDAP Enable Toggle */}\n                <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                  <div className=\"space-y-1\">\n                    <Label className=\"text-base font-medium\">Enable LDAP Authentication</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enable LDAP authentication for your organization. When disabled, users cannot authenticate via LDAP.\n                    </p>\n                  </div>\n                  <Switch\n                    checked={ldapEnabled}\n                    onCheckedChange={(enabled) => {\n                      setLdapEnabled(enabled);\n                      // Reset test status when toggling\n                      if (enabled) {\n                        setLdapTestStatus('idle');\n                        setLdapTestMessage('');\n                      }\n                    }}\n                    disabled={!isAdmin}\n                    data-testid=\"switch-ldap-enabled\"\n                  />\n                </div>\n                \n                <form onSubmit={handleSaveLdap} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"ldapUrl\">LDAP URL</Label>\n                  <Input\n                    id=\"ldapUrl\"\n                    type=\"text\"\n                    placeholder=\"ldap://ldap.company.com:389\"\n                    value={ldapSettings.url}\n                    onChange={(e) => setLdapSettings(prev => ({ ...prev, url: e.target.value }))}\n                    disabled={!isAdmin || !ldapEnabled}\n                    data-testid=\"input-ldap-url\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"ldapBaseDn\">Base DN</Label>\n                  <Input\n                    id=\"ldapBaseDn\"\n                    type=\"text\"\n                    placeholder=\"ou=users,dc=company,dc=com\"\n                    value={ldapSettings.baseDN}\n                    onChange={(e) => setLdapSettings(prev => ({ ...prev, baseDN: e.target.value }))}\n                    disabled={!isAdmin || !ldapEnabled}\n                    data-testid=\"input-ldap-base-dn\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"ldapBindDn\">Bind DN</Label>\n                  <Input\n                    id=\"ldapBindDn\"\n                    type=\"text\"\n                    placeholder=\"cn=admin,dc=company,dc=com\"\n                    value={ldapSettings.bindDN}\n                    onChange={(e) => setLdapSettings(prev => ({ ...prev, bindDN: e.target.value }))}\n                    disabled={!isAdmin || !ldapEnabled}\n                    data-testid=\"input-ldap-bind-dn\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"ldapBindPassword\">Bind Password</Label>\n                  <Input\n                    id=\"ldapBindPassword\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    value={ldapSettings.bindCredentials}\n                    onChange={(e) => setLdapSettings(prev => ({ ...prev, bindCredentials: e.target.value }))}\n                    disabled={!isAdmin || !ldapEnabled}\n                    data-testid=\"input-ldap-bind-password\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"ldapSearchFilter\">Search Filter</Label>\n                  <Input\n                    id=\"ldapSearchFilter\"\n                    type=\"text\"\n                    placeholder=\"(uid={username})\"\n                    value={ldapSettings.searchFilter}\n                    onChange={(e) => setLdapSettings(prev => ({ ...prev, searchFilter: e.target.value }))}\n                    disabled={!isAdmin || !ldapEnabled}\n                    data-testid=\"input-ldap-search-filter\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"rejectUnauthorized\"\n                    checked={!ldapSettings.tlsOptions.rejectUnauthorized}\n                    onCheckedChange={(checked) => \n                      setLdapSettings(prev => ({\n                        ...prev,\n                        tlsOptions: { ...prev.tlsOptions, rejectUnauthorized: !checked }\n                      }))\n                    }\n                    disabled={!isAdmin || !ldapEnabled}\n                    data-testid=\"checkbox-ignore-certificate\"\n                  />\n                  <Label htmlFor=\"rejectUnauthorized\">Ignore SSL Certificate</Label>\n                </div>\n\n                {/* Test Connection Status */}\n                {ldapTestStatus !== 'idle' && (\n                  <div className={`flex items-center space-x-2 p-3 rounded-lg ${\n                    ldapTestStatus === 'success' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :\n                    ldapTestStatus === 'error' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300' :\n                    'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'\n                  }`}>\n                    {ldapTestStatus === 'success' && <CheckCircle className=\"w-4 h-4\" />}\n                    {ldapTestStatus === 'error' && <AlertCircle className=\"w-4 h-4\" />}\n                    {ldapTestStatus === 'testing' && <TestTube className=\"w-4 h-4 animate-pulse\" />}\n                    <span className=\"text-sm\">{ldapTestMessage}</span>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleTestLdap}\n                    disabled={!isAdmin || !ldapEnabled || testLdapMutation.isPending}\n                    data-testid=\"button-test-ldap\"\n                  >\n                    <TestTube className=\"w-4 h-4 mr-2\" />\n                    {testLdapMutation.isPending ? \"Testing...\" : \"Test Connection\"}\n                  </Button>\n                  \n                  <Button \n                    type=\"submit\" \n                    disabled={!isAdmin || !ldapEnabled || saveLdapMutation.isPending || (ldapEnabled && ldapTestStatus !== 'success')}\n                    data-testid=\"button-save-ldap\"\n                  >\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    {saveLdapMutation.isPending ? \"Saving...\" : \"Save LDAP Settings\"}\n                  </Button>\n                </div>\n              </form>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Dashboard Access Configuration */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Shield className=\"w-5 h-5 mr-2 text-primary\" />\n                Dashboard Access\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSaveAccess} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"defaultAccess\">Default Access Level</Label>\n                  <Select \n                    value={accessSettings.defaultAccess}\n                    onValueChange={(value) => setAccessSettings(prev => ({ ...prev, defaultAccess: value }))}\n                    disabled={!isAdmin}\n                  >\n                    <SelectTrigger data-testid=\"select-default-access\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"admin\">Admin Only</SelectItem>\n                      <SelectItem value=\"standard\">Standard User</SelectItem>\n                      <SelectItem value=\"public\">Public Access</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label>Public Dashboard Settings</Label>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"allowPublicView\"\n                        checked={accessSettings.allowPublicView}\n                        onCheckedChange={(checked) => \n                          setAccessSettings(prev => ({ ...prev, allowPublicView: !!checked }))\n                        }\n                        disabled={!isAdmin}\n                        data-testid=\"checkbox-allow-public-view\"\n                      />\n                      <Label htmlFor=\"allowPublicView\" className=\"text-sm\">\n                        Allow public dashboard viewing\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox \n                        id=\"requirePublicAuth\"\n                        checked={accessSettings.requirePublicAuth}\n                        onCheckedChange={(checked) => \n                          setAccessSettings(prev => ({ ...prev, requirePublicAuth: !!checked }))\n                        }\n                        disabled={!isAdmin}\n                        data-testid=\"checkbox-require-public-auth\"\n                      />\n                      <Label htmlFor=\"requirePublicAuth\" className=\"text-sm\">\n                        Require authentication for public dashboards\n                      </Label>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n                  <Input\n                    id=\"sessionTimeout\"\n                    type=\"number\"\n                    placeholder=\"60\"\n                    value={accessSettings.sessionTimeout}\n                    onChange={(e) => setAccessSettings(prev => ({ ...prev, sessionTimeout: parseInt(e.target.value) || 60 }))}\n                    disabled={!isAdmin}\n                    data-testid=\"input-session-timeout\"\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={saveAccessMutation.isPending}\n                  data-testid=\"button-save-access\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {saveAccessMutation.isPending ? \"Saving...\" : \"Save Access Settings\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Database Status */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Database className=\"w-5 h-5 mr-2 text-primary\" />\n                Database Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"bg-muted/30 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-foreground\">Connection Status</span>\n                    <div className=\"w-2 h-2 bg-chart-2 rounded-full\"></div>\n                  </div>\n                  <p className=\"text-2xl font-bold text-chart-2\" data-testid=\"text-db-status\">Connected</p>\n                  <p className=\"text-xs text-muted-foreground\">PostgreSQL</p>\n                </div>\n                <div className=\"bg-muted/30 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-foreground\">Total Tables</span>\n                    <Database className=\"w-4 h-4 text-primary\" />\n                  </div>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-db-tables\">5</p>\n                  <p className=\"text-xs text-muted-foreground\">Auto-created on startup</p>\n                </div>\n                <div className=\"bg-muted/30 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-foreground\">Status</span>\n                    <div className=\"w-4 h-4 bg-chart-2 rounded-full\"></div>\n                  </div>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-db-health\">Healthy</p>\n                  <p className=\"text-xs text-muted-foreground\">All systems operational</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":33598},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { UserForm } from \"@/components/forms/user-form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { UserPlus, Edit, Trash2, Users as UsersIcon } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport type { User } from \"@shared/schema\";\n\nexport default function UsersPage() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const { user: currentUser } = useAuth();\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const handleCreateUser = () => {\n    setIsCreateDialogOpen(true);\n  };\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    setIsEditDialogOpen(true);\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return \"default\";\n      case \"standard\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getStatusColor = (isActive: boolean) => {\n    return isActive ? \"text-chart-2\" : \"text-muted-foreground\";\n  };\n\n  const isAdmin = currentUser?.role === \"admin\";\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <TopBar \n        title=\"User Management\"\n        onSidebarToggle={() => {}}\n        showCreateButton={isAdmin}\n        onCreateClick={handleCreateUser}\n        createButtonText=\"Add User\"\n      />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {isLoading ? (\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/6\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ) : (users as User[]).length === 0 ? (\n          <div className=\"text-center py-12\">\n            <UsersIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">No users found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {isAdmin ? \"Add your first user to get started\" : \"No users to display\"}\n            </p>\n            {isAdmin && (\n              <Button onClick={handleCreateUser} data-testid=\"button-create-first-user\">\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Add User\n              </Button>\n            )}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left p-4 font-medium text-muted-foreground\">User</th>\n                      <th className=\"text-left p-4 font-medium text-muted-foreground\">Role</th>\n                      <th className=\"text-left p-4 font-medium text-muted-foreground\">Auth Method</th>\n                      <th className=\"text-left p-4 font-medium text-muted-foreground\">Last Login</th>\n                      <th className=\"text-left p-4 font-medium text-muted-foreground\">Status</th>\n                      <th className=\"text-left p-4 font-medium text-muted-foreground\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {(users as User[]).map((user: User) => (\n                      <tr key={user.id} className=\"border-b border-border hover:bg-muted/30\" data-testid={`row-user-${user.id}`}>\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                              <span className=\"text-primary-foreground font-medium\">\n                                {user.username.charAt(0).toUpperCase()}\n                              </span>\n                            </div>\n                            <div>\n                              <div className=\"font-medium text-foreground\" data-testid={`text-user-name-${user.id}`}>\n                                {user.username}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\" data-testid={`text-user-email-${user.id}`}>\n                                {user.email}\n                              </div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"p-4\">\n                          <Badge variant={getRoleBadgeVariant(user.role)} data-testid={`badge-user-role-${user.id}`}>\n                            {user.role === \"admin\" ? \"Administrator\" : \"Standard User\"}\n                          </Badge>\n                        </td>\n                        <td className=\"p-4 text-foreground capitalize\" data-testid={`text-user-auth-method-${user.id}`}>\n                          {user.authMethod}\n                        </td>\n                        <td className=\"p-4 text-muted-foreground\" data-testid={`text-user-last-login-${user.id}`}>\n                          {user.lastLogin \n                            ? new Date(user.lastLogin).toLocaleDateString()\n                            : \"Never\"\n                          }\n                        </td>\n                        <td className=\"p-4\">\n                          <span className={`flex items-center ${getStatusColor(user.isActive)}`} data-testid={`status-user-${user.id}`}>\n                            <div className=\"w-2 h-2 bg-current rounded-full mr-2\"></div>\n                            {user.isActive ? \"Active\" : \"Inactive\"}\n                          </span>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"flex space-x-2\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"text-muted-foreground hover:text-foreground p-1\"\n                              onClick={() => handleEditUser(user)}\n                              data-testid={`button-edit-user-${user.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"text-muted-foreground hover:text-destructive p-1\"\n                              disabled={user.id === currentUser?.id}\n                              data-testid={`button-delete-user-${user.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Add User</DialogTitle>\n          </DialogHeader>\n          <UserForm \n            onSuccess={() => setIsCreateDialogOpen(false)}\n            onCancel={() => setIsCreateDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n          </DialogHeader>\n          <UserForm \n            user={selectedUser}\n            onSuccess={() => setIsEditDialogOpen(false)}\n            onCancel={() => setIsEditDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":8789},"client/src/components/charts/chart-renderer.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from \"recharts\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { BarChart3, TrendingUp, Table as TableIcon } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\ninterface ChartRendererProps {\n  type: string;\n  config: any;\n  dataSourceId: string | null;\n}\n\nexport function ChartRenderer({ type, config, dataSourceId }: ChartRendererProps) {\n  const [refreshInterval, setRefreshInterval] = useState<number | false>(false);\n\n  // Get data source info to determine refresh settings\n  const { data: dataSourceInfo } = useQuery({\n    queryKey: [\"/api/data-sources\", dataSourceId],\n    enabled: !!dataSourceId,\n  });\n\n  // Calculate refresh interval in milliseconds\n  useEffect(() => {\n    if (dataSourceInfo?.config?.refreshInterval && dataSourceInfo?.config?.refreshUnit) {\n      const interval = dataSourceInfo.config.refreshInterval;\n      const unit = dataSourceInfo.config.refreshUnit;\n      \n      let milliseconds = 0;\n      switch (unit) {\n        case 'seconds':\n          milliseconds = interval * 1000;\n          break;\n        case 'minutes':\n          milliseconds = interval * 60 * 1000;\n          break;\n        case 'hours':\n          milliseconds = interval * 60 * 60 * 1000;\n          break;\n        case 'days':\n          milliseconds = interval * 24 * 60 * 60 * 1000;\n          break;\n        case 'weeks':\n          milliseconds = interval * 7 * 24 * 60 * 60 * 1000;\n          break;\n        case 'months':\n          milliseconds = interval * 30 * 24 * 60 * 60 * 1000; // Approximate\n          break;\n        default:\n          milliseconds = 5 * 60 * 1000; // Default 5 minutes\n      }\n      \n      // Only enable auto-refresh for reasonable intervals (minimum 10 seconds)\n      setRefreshInterval(milliseconds >= 10000 ? milliseconds : false);\n    } else {\n      setRefreshInterval(false);\n    }\n  }, [dataSourceInfo]);\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"/api/data-sources\", dataSourceId, \"data\"],\n    enabled: !!dataSourceId,\n    refetchInterval: refreshInterval,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-muted/50 rounded-md\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto mb-2\"></div>\n          <p className=\"text-sm text-muted-foreground\">Loading data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !dataSourceId) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-muted/50 rounded-md\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 bg-destructive/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n            <span className=\"text-destructive text-sm\">!</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            {error ? \"Failed to load data\" : \"No data source configured\"}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Render based on visualization type\n  switch (type) {\n    case \"table\":\n      return (\n        <div className=\"h-full bg-muted/50 rounded-md\">\n          {(data as any)?.data?.length > 0 ? (\n            <div \n              className=\"h-full overflow-auto scrollbar-thin scrollbar-track-muted scrollbar-thumb-muted-foreground\"\n              style={{\n                scrollbarWidth: 'thin',\n                scrollbarColor: 'hsl(var(--muted-foreground)) hsl(var(--muted))'\n              }}\n            >\n              <table className=\"border-collapse\" style={{ minWidth: 'max-content' }}>\n                <thead className=\"[&_tr]:border-b sticky top-0 bg-muted/50\">\n                  <tr className=\"border-b transition-colors hover:bg-muted/50\">\n                    {(data as any).fields?.map((field: string) => {\n                      const displayName = (data as any).fieldDisplayNames?.[field] || field;\n                      return (\n                        <th \n                          key={field}\n                          className=\"h-8 px-4 text-left align-middle font-medium text-muted-foreground whitespace-nowrap min-w-[120px]\"\n                        >\n                          {displayName}\n                        </th>\n                      );\n                    })}\n                  </tr>\n                </thead>\n                <tbody className=\"[&_tr:last-child]:border-0\">\n                  {(data as any).data.map((row: any, index: number) => (\n                    <tr key={index} className=\"border-b transition-colors hover:bg-muted/50\">\n                      {(data as any).fields?.map((field: string) => {\n                        const value = row[field];\n                        let displayValue = value;\n                        \n                        // Handle nested objects by converting to string\n                        if (typeof value === 'object' && value !== null) {\n                          displayValue = JSON.stringify(value);\n                        } else if (value === null || value === undefined) {\n                          displayValue = '';\n                        }\n                        \n                        return (\n                          <td \n                            key={field}\n                            className=\"p-4 align-middle whitespace-nowrap text-sm min-w-[120px]\"\n                          >\n                            {String(displayValue)}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center\">\n                <TableIcon className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">No data available</p>\n              </div>\n            </div>\n          )}\n        </div>\n      );\n\n    case \"chart\":\n      return (\n        <div className=\"h-full bg-muted/50 rounded-md p-2\">\n          {(data as any)?.data?.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={(data as any).data}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" fontSize={12} />\n                <YAxis fontSize={12} />\n                <Tooltip />\n                <Bar dataKey=\"value\" fill=\"hsl(var(--primary))\" />\n              </BarChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center\">\n                <BarChart3 className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">No data available</p>\n              </div>\n            </div>\n          )}\n        </div>\n      );\n\n    case \"graph\":\n      return (\n        <div className=\"h-full bg-muted/50 rounded-md p-2\">\n          {(data as any)?.data?.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={(data as any).data}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" fontSize={12} />\n                <YAxis fontSize={12} />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"value\" stroke=\"hsl(var(--primary))\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center\">\n                <TrendingUp className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">No data available</p>\n              </div>\n            </div>\n          )}\n        </div>\n      );\n\n    default:\n      return (\n        <div className=\"flex items-center justify-center h-full bg-muted/50 rounded-md\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 bg-muted rounded-lg flex items-center justify-center mx-auto mb-2\">\n              <span className=\"text-muted-foreground text-sm\">?</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Unknown visualization type</p>\n          </div>\n        </div>\n      );\n  }\n}\n","size_bytes":8592},"client/src/components/dashboard/dashboard-canvas.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardCard } from \"./dashboard-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, Plus, Save, BarChart3, Table, TrendingUp } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Dashboard, DashboardCard as DashboardCardType, DataSource } from \"@shared/schema\";\n\ninterface DashboardCanvasProps {\n  dashboard: Dashboard;\n  onBack: () => void;\n  isPublic?: boolean;\n}\n\nexport function DashboardCanvas({ dashboard, onBack, isPublic = false }: DashboardCanvasProps) {\n  const [isAddCardDialogOpen, setIsAddCardDialogOpen] = useState(false);\n  const [isEditCardDialogOpen, setIsEditCardDialogOpen] = useState(false);\n  const [editingCard, setEditingCard] = useState<DashboardCardType | null>(null);\n  const [cardTitle, setCardTitle] = useState(\"\");\n  const [selectedDataSource, setSelectedDataSource] = useState(\"\");\n  const [selectedVisualizationType, setSelectedVisualizationType] = useState(\"\");\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: cards = [], isLoading } = useQuery({\n    queryKey: isPublic \n      ? [\"/api/public/dashboards\", dashboard.id, \"cards\"]\n      : [\"/api/dashboards\", dashboard.id, \"cards\"],\n  });\n\n  const { data: dataSources = [] } = useQuery({\n    queryKey: [\"/api/data-sources\"],\n    enabled: !isPublic, // Only fetch data sources for authenticated dashboard editing\n  });\n\n  const createCardMutation = useMutation({\n    mutationFn: (data: any) =>\n      apiRequest(\"POST\", `/api/dashboards/${dashboard.id}/cards`, data),\n    onSuccess: () => {\n      toast({\n        title: \"Card created\",\n        description: \"Your dashboard card has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboards\", dashboard.id, \"cards\"] });\n      setIsAddCardDialogOpen(false);\n      setCardTitle(\"\");\n      setSelectedDataSource(\"\");\n      setSelectedVisualizationType(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to create card\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCardMutation = useMutation({\n    mutationFn: ({ cardId, updates }: { cardId: string; updates: any }) =>\n      apiRequest(\"PUT\", `/api/cards/${cardId}`, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboards\", dashboard.id, \"cards\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update card\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const editCardMutation = useMutation({\n    mutationFn: (data: any) =>\n      apiRequest(\"PUT\", `/api/cards/${editingCard?.id}`, data),\n    onSuccess: () => {\n      toast({\n        title: \"Card updated\",\n        description: \"Your dashboard card has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboards\", dashboard.id, \"cards\"] });\n      setIsEditCardDialogOpen(false);\n      setCardTitle(\"\");\n      setSelectedDataSource(\"\");\n      setSelectedVisualizationType(\"\");\n      setEditingCard(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update card\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const visualizationTypes = [\n    { id: \"table\", name: \"Table\", description: \"Display data in rows and columns\", icon: Table },\n    { id: \"chart\", name: \"Bar Chart\", description: \"Show data as bars\", icon: BarChart3 },\n    { id: \"graph\", name: \"Line Graph\", description: \"Display trends over time\", icon: TrendingUp },\n  ];\n\n  const handleAddCard = () => {\n    setIsAddCardDialogOpen(true);\n  };\n\n  const handleEditCard = (card: DashboardCardType) => {\n    setEditingCard(card);\n    setCardTitle(card.title);\n    setSelectedDataSource(card.dataSourceId || \"\");\n    setSelectedVisualizationType(card.visualizationType);\n    setIsEditCardDialogOpen(true);\n  };\n\n  const saveDashboardMutation = useMutation({\n    mutationFn: (updates: any) =>\n      apiRequest(\"PUT\", `/api/dashboards/${dashboard.id}`, updates),\n    onSuccess: () => {\n      toast({\n        title: \"Dashboard saved\",\n        description: \"Your dashboard has been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboards\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to save dashboard\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveDashboard = () => {\n    saveDashboardMutation.mutate({\n      name: dashboard.name,\n      description: dashboard.description,\n      isPublic: dashboard.isPublic,\n      updatedAt: new Date().toISOString(),\n    });\n  };\n\n\n  const handleCardPositionChange = useCallback((cardId: string, position: { x: number; y: number }, size?: { width: number; height: number }) => {\n    const updates: any = { position };\n    if (size) {\n      updates.size = size;\n    }\n    updateCardMutation.mutate({ cardId, updates });\n  }, [dashboard.id, updateCardMutation]);\n\n  const handleCreateCard = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!cardTitle.trim() || !selectedVisualizationType) {\n      toast({\n        title: \"Validation error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate position for new card (simple grid layout)\n    const existingCardsCount = (cards as DashboardCardType[]).length;\n    const x = (existingCardsCount % 3) * 320; // 300px width + 20px margin\n    const y = Math.floor(existingCardsCount / 3) * 240; // 200px height + 40px margin\n\n    createCardMutation.mutate({\n      title: cardTitle.trim(),\n      dataSourceId: selectedDataSource === \"none\" ? null : selectedDataSource || null,\n      visualizationType: selectedVisualizationType,\n      position: { x, y },\n      size: { width: 300, height: 200 },\n      config: {},\n    });\n  };\n\n  const handleUpdateCard = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!cardTitle || !selectedVisualizationType || !editingCard) return;\n\n    editCardMutation.mutate({\n      title: cardTitle,\n      dataSourceId: selectedDataSource === \"none\" ? null : selectedDataSource,\n      visualizationType: selectedVisualizationType,\n      config: {},\n    });\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {!isPublic && (\n        <div className=\"bg-card border-b border-border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={onBack}\n                className=\"text-muted-foreground hover:text-foreground\"\n                data-testid=\"button-back-to-dashboards\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <h3 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-dashboard-name\">\n                {dashboard.name}\n              </h3>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"secondary\" \n                size=\"sm\"\n                onClick={handleAddCard}\n                data-testid=\"button-add-card\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Card\n              </Button>\n              <Button \n                size=\"sm\"\n                onClick={handleSaveDashboard}\n                disabled={saveDashboardMutation.isPending}\n                data-testid=\"button-save-dashboard\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {saveDashboardMutation.isPending ? \"Saving...\" : \"Save\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div \n        ref={canvasRef}\n        className=\"flex-1 dashboard-canvas relative bg-muted/30 m-4 rounded-lg overflow-auto\"\n        style={{ \n          backgroundImage: \"radial-gradient(circle, hsl(var(--muted)) 1px, transparent 1px)\",\n          backgroundSize: \"20px 20px\"\n        }}\n        data-testid=\"dashboard-canvas\"\n      >\n        {isLoading ? (\n          <div className=\"p-4\">\n            <div className=\"text-center text-muted-foreground\">Loading cards...</div>\n          </div>\n        ) : (cards as DashboardCardType[]).length === 0 ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center\">\n              <Plus className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">No cards yet</h3>\n              <p className=\"text-muted-foreground mb-4\">Add your first card to start visualizing data</p>\n              <Button onClick={handleAddCard} data-testid=\"button-add-first-card\">\n                Add Card\n              </Button>\n            </div>\n          </div>\n        ) : (\n          (cards as DashboardCardType[]).map((card: DashboardCardType) => (\n            <DashboardCard\n              key={card.id}\n              card={card}\n              onPositionChange={handleCardPositionChange}\n              onEdit={handleEditCard}\n            />\n          ))\n        )}\n      </div>\n\n      <Dialog open={isAddCardDialogOpen} onOpenChange={setIsAddCardDialogOpen}>\n        <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Add Dashboard Card</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleCreateCard} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"cardTitle\">Card Title</Label>\n              <Input \n                id=\"cardTitle\" \n                placeholder=\"Sales Overview\" \n                value={cardTitle}\n                onChange={(e) => setCardTitle(e.target.value)}\n                data-testid=\"input-card-title\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label>Data Source (Optional)</Label>\n              <Select value={selectedDataSource} onValueChange={setSelectedDataSource}>\n                <SelectTrigger data-testid=\"select-data-source\">\n                  <SelectValue placeholder=\"Select a data source\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No data source</SelectItem>\n                  {(dataSources as DataSource[]).map((dataSource) => (\n                    <SelectItem key={dataSource.id} value={dataSource.id}>\n                      {dataSource.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-3\">\n              <Label>Visualization Type</Label>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n                {visualizationTypes.map((type) => {\n                  const IconComponent = type.icon;\n                  return (\n                    <Button\n                      key={type.id}\n                      type=\"button\"\n                      variant={selectedVisualizationType === type.id ? \"default\" : \"outline\"}\n                      className=\"h-auto p-4 flex flex-col sm:flex-col items-center justify-center space-y-2 min-h-[80px] text-left\"\n                      onClick={() => setSelectedVisualizationType(type.id)}\n                      data-testid={`button-visualization-${type.id}`}\n                    >\n                      <IconComponent className=\"w-6 h-6 flex-shrink-0\" />\n                      <div className=\"text-center w-full\">\n                        <div className=\"text-sm font-medium leading-tight\">{type.name}</div>\n                        <div className=\"text-xs text-muted-foreground leading-tight mt-1 overflow-hidden\">{type.description}</div>\n                      </div>\n                    </Button>\n                  );\n                })}\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => setIsAddCardDialogOpen(false)}\n                data-testid=\"button-cancel-card\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={createCardMutation.isPending}\n                data-testid=\"button-submit-card\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                {createCardMutation.isPending ? \"Creating...\" : \"Create Card\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isEditCardDialogOpen} onOpenChange={setIsEditCardDialogOpen}>\n        <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Dashboard Card</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleUpdateCard} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"editCardTitle\">Card Title</Label>\n              <Input \n                id=\"editCardTitle\" \n                placeholder=\"Sales Overview\" \n                value={cardTitle}\n                onChange={(e) => setCardTitle(e.target.value)}\n                data-testid=\"input-edit-card-title\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label>Data Source (Optional)</Label>\n              <Select value={selectedDataSource} onValueChange={setSelectedDataSource}>\n                <SelectTrigger data-testid=\"select-edit-data-source\">\n                  <SelectValue placeholder=\"Select a data source\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No data source</SelectItem>\n                  {(dataSources as DataSource[]).map((dataSource) => (\n                    <SelectItem key={dataSource.id} value={dataSource.id}>\n                      {dataSource.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-3\">\n              <Label>Visualization Type</Label>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n                {visualizationTypes.map((type) => {\n                  const IconComponent = type.icon;\n                  return (\n                    <Button\n                      key={type.id}\n                      type=\"button\"\n                      variant={selectedVisualizationType === type.id ? \"default\" : \"outline\"}\n                      className=\"h-auto p-4 flex flex-col sm:flex-col items-center justify-center space-y-2 min-h-[80px] text-left\"\n                      onClick={() => setSelectedVisualizationType(type.id)}\n                      data-testid={`button-edit-visualization-${type.id}`}\n                    >\n                      <IconComponent className=\"w-6 h-6 flex-shrink-0\" />\n                      <div className=\"text-center w-full\">\n                        <div className=\"text-sm font-medium leading-tight\">{type.name}</div>\n                        <div className=\"text-xs text-muted-foreground leading-tight mt-1 overflow-hidden\">{type.description}</div>\n                      </div>\n                    </Button>\n                  );\n                })}\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => setIsEditCardDialogOpen(false)}\n                data-testid=\"button-cancel-edit-card\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={editCardMutation.isPending}\n                data-testid=\"button-submit-edit-card\"\n              >\n                {editCardMutation.isPending ? \"Updating...\" : \"Update Card\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":17172},"client/src/components/dashboard/dashboard-card.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChartRenderer } from \"@/components/charts/chart-renderer\";\nimport { Settings, RotateCcw, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { DashboardCard as DashboardCardType } from \"@shared/schema\";\n\ninterface DashboardCardProps {\n  card: DashboardCardType;\n  onPositionChange: (cardId: string, position: { x: number; y: number }, size?: { width: number; height: number }) => void;\n  onEdit?: (card: DashboardCardType) => void;\n}\n\nexport function DashboardCard({ card, onPositionChange, onEdit }: DashboardCardProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isResizing, setIsResizing] = useState(false);\n  const [position, setPosition] = useState(card.position as { x: number; y: number });\n  const [size, setSize] = useState(card.size as { width: number; height: number });\n  const dragRef = useRef<HTMLDivElement>(null);\n  const dragStart = useRef<{ x: number; y: number } | null>(null);\n  const resizeStart = useRef<{ x: number; y: number; width: number; height: number } | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    const target = e.target as HTMLElement;\n    \n    // Don't start dragging if clicking on buttons or resize handles\n    if (target.closest('button') || target.classList.contains('resize-handle')) {\n      return;\n    }\n    \n    e.preventDefault();\n    setIsDragging(true);\n    dragStart.current = {\n      x: e.clientX - position.x,\n      y: e.clientY - position.y,\n    };\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging && dragStart.current) {\n      const newX = Math.max(0, e.clientX - dragStart.current.x);\n      const newY = Math.max(0, e.clientY - dragStart.current.y);\n      \n      // Snap to 20px grid\n      const snappedX = Math.round(newX / 20) * 20;\n      const snappedY = Math.round(newY / 20) * 20;\n      \n      setPosition({ x: snappedX, y: snappedY });\n    }\n  };\n\n  const handleMouseUp = () => {\n    if (isDragging) {\n      setIsDragging(false);\n      onPositionChange(card.id, position);\n    }\n    if (isResizing) {\n      setIsResizing(false);\n      onPositionChange(card.id, position, size);\n    }\n  };\n\n  // Add resize functionality\n  const handleResizeStart = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsResizing(true);\n    resizeStart.current = {\n      x: e.clientX,\n      y: e.clientY,\n      width: size.width,\n      height: size.height,\n    };\n  };\n\n  const handleResizeMove = (e: MouseEvent) => {\n    if (isResizing && resizeStart.current) {\n      const deltaX = e.clientX - resizeStart.current.x;\n      const deltaY = e.clientY - resizeStart.current.y;\n      \n      const newWidth = Math.max(200, resizeStart.current.width + deltaX);\n      const newHeight = Math.max(150, resizeStart.current.height + deltaY);\n      \n      // Snap to 20px grid\n      const snappedWidth = Math.round(newWidth / 20) * 20;\n      const snappedHeight = Math.round(newHeight / 20) * 20;\n      \n      setSize({ width: snappedWidth, height: snappedHeight });\n    }\n  };\n\n  // Add global mouse event listeners when dragging or resizing\n  useEffect(() => {\n    const handleMove = (e: MouseEvent) => {\n      if (isDragging) {\n        handleMouseMove(e);\n      } else if (isResizing) {\n        handleResizeMove(e);\n      }\n    };\n\n    if (isDragging || isResizing) {\n      document.addEventListener(\"mousemove\", handleMove);\n      document.addEventListener(\"mouseup\", handleMouseUp);\n      \n      return () => {\n        document.removeEventListener(\"mousemove\", handleMove);\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n      };\n    }\n  }, [isDragging, isResizing, position, size]);\n\n  const deleteCardMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", `/api/cards/${card.id}`),\n    onSuccess: () => {\n      toast({\n        title: \"Card deleted\",\n        description: \"Dashboard card has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboards\", card.dashboardId, \"cards\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to delete card\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRefresh = () => {\n    // Refresh chart data by invalidating queries\n    queryClient.invalidateQueries({ queryKey: [\"/api/data-sources\", card.dataSourceId, \"data\"] });\n    toast({\n      title: \"Card refreshed\",\n      description: \"Dashboard card data has been refreshed.\",\n    });\n  };\n\n  const handleEdit = () => {\n    if (onEdit) {\n      onEdit(card);\n    }\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this card?\")) {\n      deleteCardMutation.mutate();\n    }\n  };\n\n  return (\n    <div\n      ref={dragRef}\n      className={cn(\n        \"absolute bg-card border border-border rounded-lg shadow-sm transition-all duration-200\",\n        isDragging ? \"cursor-grabbing z-50 shadow-lg\" : \"cursor-move hover:shadow-md\"\n      )}\n      style={{\n        top: `${position.y}px`,\n        left: `${position.x}px`,\n        width: `${size.width}px`,\n        height: `${size.height}px`,\n      }}\n      onMouseDown={handleMouseDown}\n      data-testid={`dashboard-card-${card.id}`}\n    >\n      <div className=\"p-4 h-full flex flex-col\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h4 className=\"font-medium text-foreground truncate\" data-testid={`text-card-title-${card.id}`}>\n            {card.title}\n          </h4>\n          <div className=\"flex space-x-1\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"text-muted-foreground hover:text-foreground p-1 h-6 w-6\"\n              onClick={handleEdit}\n              data-testid={`button-edit-card-${card.id}`}\n            >\n              <Settings className=\"w-3 h-3\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"text-muted-foreground hover:text-foreground p-1 h-6 w-6\"\n              onClick={handleRefresh}\n              data-testid={`button-refresh-card-${card.id}`}\n            >\n              <RotateCcw className=\"w-3 h-3\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"text-muted-foreground hover:text-destructive p-1 h-6 w-6\"\n              onClick={handleDelete}\n              data-testid={`button-delete-card-${card.id}`}\n            >\n              <X className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex-1 min-h-0\">\n          <ChartRenderer \n            type={card.visualizationType}\n            config={card.config as any}\n            dataSourceId={card.dataSourceId}\n          />\n        </div>\n      </div>\n      \n      {/* Resize handle */}\n      <div\n        className=\"resize-handle absolute bottom-0 right-0 w-4 h-4 bg-muted-foreground/20 hover:bg-muted-foreground/40 cursor-se-resize\"\n        style={{\n          clipPath: 'polygon(100% 0%, 0% 100%, 100% 100%)'\n        }}\n        onMouseDown={handleResizeStart}\n      />\n    </div>\n  );\n}\n","size_bytes":7542},"client/src/components/forms/data-source-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Link, Globe, Database, Plus, PlayCircle, CheckCircle, AlertCircle, Clock, Ticket, Headphones, Edit, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { cn } from \"@/lib/utils\";\nimport type { DataSource } from \"@shared/schema\";\n\ninterface DataSourceFormProps {\n  dataSource?: DataSource | null;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst dataSourceTypes = [\n  { id: \"api\", name: \"API\", description: \"REST endpoints\", icon: Link },\n  { id: \"jira\", name: \"JIRA\", description: \"Issue tracking\", icon: Ticket },\n  { id: \"smax\", name: \"OpenText SMAX\", description: \"Service Management\", icon: Headphones },\n  { id: \"scraping\", name: \"Web Scraping\", description: \"Extract from web\", icon: Globe },\n  { id: \"database\", name: \"Database\", description: \"SQL queries\", icon: Database },\n];\n\nexport function DataSourceForm({ dataSource, onSuccess, onCancel }: DataSourceFormProps) {\n  const [selectedType, setSelectedType] = useState(dataSource?.type || \"\");\n  const [name, setName] = useState(dataSource?.name || \"\");\n  const [curlRequest, setCurlRequest] = useState((dataSource?.config as any)?.curlRequest || \"\");\n  const [selectedFields, setSelectedFields] = useState<string[]>((dataSource?.config as any)?.selectedFields || []);\n  const [fieldDisplayNames, setFieldDisplayNames] = useState<Record<string, string>>((dataSource?.config as any)?.fieldDisplayNames || {});\n  const [refreshInterval, setRefreshInterval] = useState<number>((dataSource?.config as any)?.refreshInterval || 5);\n  const [refreshUnit, setRefreshUnit] = useState<string>((dataSource?.config as any)?.refreshUnit || \"minutes\");\n  \n  // JIRA-specific states\n  const [jiraUrl, setJiraUrl] = useState((dataSource?.config as any)?.jiraUrl || \"\");\n  const [jiraUsername, setJiraUsername] = useState((dataSource?.config as any)?.jiraUsername || \"\");\n  const [jiraPassword, setJiraPassword] = useState((dataSource?.config as any)?.jiraPassword || \"\");\n  const [jiraProjects, setJiraProjects] = useState<any[]>([]);\n  const [selectedJiraProject, setSelectedJiraProject] = useState((dataSource?.config as any)?.selectedJiraProject || \"\");\n  const [jiraQuery, setJiraQuery] = useState((dataSource?.config as any)?.jiraQuery || \"\");\n  const [jiraSavedFilters, setJiraSavedFilters] = useState<any[]>([]);\n  const [selectedJiraSavedFilter, setSelectedJiraSavedFilter] = useState(\"\");\n  \n  // SMAX-specific states\n  const [smaxUrl, setSmaxUrl] = useState((dataSource?.config as any)?.smaxUrl || \"\");\n  const [smaxUsername, setSmaxUsername] = useState((dataSource?.config as any)?.smaxUsername || \"\");\n  const [smaxPassword, setSmaxPassword] = useState((dataSource?.config as any)?.smaxPassword || \"\");\n  const [smaxServices, setSmaxServices] = useState<any[]>([]);\n  const [selectedSmaxService, setSelectedSmaxService] = useState((dataSource?.config as any)?.selectedSmaxService || \"\");\n  const [smaxQuery, setSmaxQuery] = useState((dataSource?.config as any)?.smaxQuery || \"\");\n  const [isTestingDataSource, setIsTestingDataSource] = useState(false);\n  const [testResults, setTestResults] = useState<any>(null);\n  const [testError, setTestError] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/data-sources\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Data source created\",\n        description: \"Your data source has been configured successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/data-sources\"] });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to create data source\",\n        description: \"Please check your configuration and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"PUT\", `/api/data-sources/${dataSource?.id}`, data),\n    onSuccess: () => {\n      toast({\n        title: \"Data source updated\",\n        description: \"Your data source has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/data-sources\"] });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update data source\",\n        description: \"Please check your configuration and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTestDataSource = async () => {\n    if (!selectedType) {\n      toast({\n        title: \"Please select a data source type\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedType === \"api\" && !curlRequest.trim()) {\n      toast({\n        title: \"Please enter a cURL request to test\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedType === \"jira\" && (!jiraUrl.trim() || !jiraUsername.trim() || !jiraPassword.trim())) {\n      toast({\n        title: \"Please enter JIRA URL, username, and password to test\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedType === \"smax\" && (!smaxUrl.trim() || !smaxUsername.trim() || !smaxPassword.trim())) {\n      toast({\n        title: \"Please enter SMAX URL, username, and password to test\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsTestingDataSource(true);\n    setTestResults(null);\n    setTestError(null);\n\n    try {\n      const testData = {\n        type: selectedType,\n        config: selectedType === \"api\" \n          ? { curlRequest } \n          : selectedType === \"jira\"\n          ? { jiraUrl, jiraUsername, jiraPassword }\n          : selectedType === \"smax\"\n          ? { smaxUrl, smaxUsername, smaxPassword }\n          : {},\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/data-sources/test\", testData);\n      const responseData = await response.json();\n      setTestResults(responseData);\n      \n      // For JIRA, set the projects and saved filters if returned\n      if (selectedType === \"jira\" && responseData.projects) {\n        setJiraProjects(responseData.projects);\n        if (responseData.savedFilters) {\n          setJiraSavedFilters(responseData.savedFilters);\n        }\n      }\n      \n      // For SMAX, set the services if returned\n      if (selectedType === \"smax\" && responseData.services) {\n        setSmaxServices(responseData.services);\n      }\n      \n      toast({\n        title: \"Test successful\",\n        description: \"Data source connection tested successfully!\",\n      });\n    } catch (error: any) {\n      const errorMessage = error.message || \"Failed to test data source\";\n      setTestError(errorMessage);\n      toast({\n        title: \"Test failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsTestingDataSource(false);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedType || !name) {\n      toast({\n        title: \"Validation error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let config = {};\n    if (selectedType === \"api\") {\n      config = { curlRequest, selectedFields, fieldDisplayNames, refreshInterval, refreshUnit };\n    } else if (selectedType === \"jira\") {\n      config = { jiraUrl, jiraUsername, jiraPassword, selectedJiraProject, jiraQuery, selectedJiraSavedFilter, selectedFields, fieldDisplayNames, refreshInterval, refreshUnit };\n    } else if (selectedType === \"smax\") {\n      config = { smaxUrl, smaxUsername, smaxPassword, selectedSmaxService, smaxQuery, selectedFields, fieldDisplayNames, refreshInterval, refreshUnit };\n    }\n    \n    const data = {\n      name,\n      type: selectedType,\n      config,\n    };\n\n    if (dataSource) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <Label className=\"text-sm font-medium text-foreground\">Data Source Type</Label>\n        <div className=\"grid grid-cols-3 gap-4\">\n          {dataSourceTypes.map((type) => {\n            const IconComponent = type.icon;\n            return (\n              <Card \n                key={type.id}\n                className={cn(\n                  \"cursor-pointer transition-colors hover:bg-accent\",\n                  selectedType === type.id && \"ring-2 ring-primary bg-accent\"\n                )}\n                onClick={() => setSelectedType(type.id)}\n                data-testid={`card-data-source-type-${type.id}`}\n              >\n                <CardContent className=\"p-4 text-center\">\n                  <IconComponent className=\"w-8 h-8 mx-auto mb-2 text-primary\" />\n                  <p className=\"font-medium text-foreground\">{type.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">{type.description}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"dataSourceName\">Data Source Name</Label>\n        <Input\n          id=\"dataSourceName\"\n          type=\"text\"\n          placeholder=\"My API Source\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          data-testid=\"input-data-source-name\"\n          required\n        />\n      </div>\n\n      {selectedType === \"api\" && (\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"curlRequest\">cURL Request</Label>\n          <Textarea\n            id=\"curlRequest\"\n            placeholder=\"curl -X GET 'https://api.example.com/data' -H 'Authorization: Bearer TOKEN'\"\n            value={curlRequest}\n            onChange={(e) => setCurlRequest(e.target.value)}\n            className=\"h-24\"\n            data-testid=\"textarea-curl-request\"\n          />\n          <div className=\"bg-muted/30 rounded-md p-3 text-sm text-muted-foreground\">\n            <p>• Import your cURL request to automatically parse JSON fields</p>\n            <p>• Map response fields to dashboard card data</p>\n            <p>• Configure data transformations and filters</p>\n          </div>\n          \n          {curlRequest.trim() && (\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleTestDataSource}\n              disabled={isTestingDataSource}\n              className=\"w-full\"\n              data-testid=\"button-test-data-source\"\n            >\n              <PlayCircle className=\"w-4 h-4 mr-2\" />\n              {isTestingDataSource ? \"Testing...\" : \"Test Data Source\"}\n            </Button>\n          )}\n          \n          {/* Refresh Interval Configuration */}\n          <div className=\"space-y-2 pt-4 border-t border-border\">\n            <Label className=\"text-sm font-medium text-foreground flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Auto-Refresh Interval\n            </Label>\n            <div className=\"flex gap-2\">\n              <div className=\"flex-1\">\n                <Input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"999\"\n                  placeholder=\"5\"\n                  value={refreshInterval}\n                  onChange={(e) => setRefreshInterval(parseInt(e.target.value) || 5)}\n                  className=\"w-full\"\n                  data-testid=\"input-refresh-interval\"\n                />\n              </div>\n              <div className=\"w-32\">\n                <Select value={refreshUnit} onValueChange={setRefreshUnit}>\n                  <SelectTrigger data-testid=\"select-refresh-unit\">\n                    <SelectValue placeholder=\"Unit\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"seconds\">Seconds</SelectItem>\n                    <SelectItem value=\"minutes\">Minutes</SelectItem>\n                    <SelectItem value=\"hours\">Hours</SelectItem>\n                    <SelectItem value=\"days\">Days</SelectItem>\n                    <SelectItem value=\"weeks\">Weeks</SelectItem>\n                    <SelectItem value=\"months\">Months</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Dashboard cards will automatically refresh data every {refreshInterval} {refreshUnit}.\n            </p>\n          </div>\n        </div>\n      )}\n\n      {selectedType === \"jira\" && (\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"jiraUrl\">JIRA URL</Label>\n            <Input\n              id=\"jiraUrl\"\n              type=\"url\"\n              placeholder=\"https://your-company.atlassian.net\"\n              value={jiraUrl}\n              onChange={(e) => setJiraUrl(e.target.value)}\n              data-testid=\"input-jira-url\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"jiraUsername\">JIRA Username</Label>\n            <Input\n              id=\"jiraUsername\"\n              type=\"text\"\n              placeholder=\"your.email@company.com\"\n              value={jiraUsername}\n              onChange={(e) => setJiraUsername(e.target.value)}\n              data-testid=\"input-jira-username\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"jiraPassword\">JIRA Password/API Token</Label>\n            <Input\n              id=\"jiraPassword\"\n              type=\"password\"\n              placeholder=\"Your API token\"\n              value={jiraPassword}\n              onChange={(e) => setJiraPassword(e.target.value)}\n              data-testid=\"input-jira-password\"\n              required\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              For Atlassian Cloud, use an API token instead of your password. Generate one at: Account Settings → Security → API tokens\n            </p>\n          </div>\n          \n          {jiraUrl.trim() && jiraUsername.trim() && jiraPassword.trim() && (\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleTestDataSource}\n              disabled={isTestingDataSource}\n              className=\"w-full\"\n              data-testid=\"button-test-jira-connection\"\n            >\n              <PlayCircle className=\"w-4 h-4 mr-2\" />\n              {isTestingDataSource ? \"Testing...\" : \"Test JIRA Connection\"}\n            </Button>\n          )}\n          \n          {jiraProjects.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"jiraProject\">JIRA Project</Label>\n              <Select value={selectedJiraProject} onValueChange={setSelectedJiraProject}>\n                <SelectTrigger data-testid=\"select-jira-project\">\n                  <SelectValue placeholder=\"Select a project\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {jiraProjects.map((project) => (\n                    <SelectItem key={project.key} value={project.key}>\n                      {project.name} ({project.key})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          \n          {/* Saved Filters Selection */}\n          {jiraSavedFilters.length > 0 && selectedJiraProject && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"jiraSavedFilter\">Use Saved Filter</Label>\n              <Select \n                value={selectedJiraSavedFilter} \n                onValueChange={(value) => {\n                  setSelectedJiraSavedFilter(value);\n                  if (value === \"custom\") {\n                    setJiraQuery(\"\"); // Clear custom query when switching to custom\n                  } else if (value) {\n                    // Find the selected filter and set its JQL (fix ID type mismatch)\n                    const filter = jiraSavedFilters.find(f => String(f.id) === value);\n                    if (filter) {\n                      setJiraQuery(filter.jql || \"\");\n                    }\n                  }\n                }}\n              >\n                <SelectTrigger data-testid=\"select-jira-saved-filter\">\n                  <SelectValue placeholder=\"Select saved filter or custom JQL\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"custom\">\n                    <div className=\"flex items-center\">\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Custom JQL Query\n                    </div>\n                  </SelectItem>\n                  {jiraSavedFilters.map((filter) => (\n                    <SelectItem key={filter.id} value={String(filter.id)}>\n                      <div className=\"flex items-center\">\n                        {filter.favourite && <Star className=\"w-4 h-4 mr-2 text-yellow-500\" />}\n                        <div>\n                          <div className=\"font-medium\">{filter.name}</div>\n                          {filter.description && (\n                            <div className=\"text-xs text-muted-foreground\">{filter.description}</div>\n                          )}\n                          <div className=\"text-xs text-muted-foreground\">by {filter.owner}</div>\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {selectedJiraSavedFilter && selectedJiraSavedFilter !== \"custom\" && (\n                <div className=\"bg-muted/30 rounded-md p-3 text-sm text-muted-foreground\">\n                  <p><strong>Filter JQL:</strong> {jiraSavedFilters.find(f => String(f.id) === selectedJiraSavedFilter)?.jql}</p>\n                </div>\n              )}\n            </div>\n          )}\n          \n          {selectedJiraProject && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"jiraQuery\">JIRA Query (JQL)</Label>\n              <Textarea\n                id=\"jiraQuery\"\n                placeholder=\"project = MYPROJECT AND status != Done ORDER BY created DESC\"\n                value={jiraQuery}\n                onChange={(e) => setJiraQuery(e.target.value)}\n                className=\"h-20\"\n                data-testid=\"textarea-jira-query\"\n              />\n              <div className=\"bg-muted/30 rounded-md p-3 text-sm text-muted-foreground\">\n                <p>• Use JQL (JIRA Query Language) to filter issues</p>\n                <p>• Example: project = \"{selectedJiraProject}\" AND assignee = currentUser()</p>\n                <p>• Leave empty to fetch all issues from the project</p>\n              </div>\n              \n              {/* Test JIRA query to get fields */}\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={async () => {\n                  setIsTestingDataSource(true);\n                  setTestResults(null);\n                  setTestError(null);\n                  \n                  try {\n                    const testData = {\n                      type: \"jira\",\n                      config: { jiraUrl, jiraUsername, jiraPassword, selectedJiraProject, jiraQuery }\n                    };\n                    \n                    const response = await apiRequest(\"POST\", \"/api/data-sources/test\", testData);\n                    const responseData = await response.json();\n                    \n                    // Update saved filters if returned from query test\n                    if (responseData.savedFilters) {\n                      setJiraSavedFilters(responseData.savedFilters);\n                    }\n                    \n                    // Simulate fetching sample data to show available fields\n                    const sampleFields = [\n                      'key', 'summary', 'status', 'assignee', 'reporter', 'priority',\n                      'issueType', 'created', 'updated', 'resolved', 'project', 'projectKey',\n                      'description', 'labels', 'components', 'fixVersions', 'storyPoints', 'sprint'\n                    ];\n                    \n                    setTestResults({ \n                      ...responseData, \n                      fields: sampleFields,\n                      message: \"JIRA query tested successfully! Select the fields you want to display in your dashboard.\"\n                    });\n                    \n                    toast({\n                      title: \"JIRA query test successful\",\n                      description: \"Select the fields you want to display in your dashboard.\",\n                    });\n                  } catch (error: any) {\n                    const errorMessage = error.message || \"Failed to test JIRA query\";\n                    setTestError(errorMessage);\n                    toast({\n                      title: \"JIRA query test failed\",\n                      description: errorMessage,\n                      variant: \"destructive\",\n                    });\n                  } finally {\n                    setIsTestingDataSource(false);\n                  }\n                }}\n                disabled={isTestingDataSource || !selectedJiraProject}\n                className=\"w-full\"\n                data-testid=\"button-test-jira-query\"\n              >\n                <PlayCircle className=\"w-4 h-4 mr-2\" />\n                {isTestingDataSource ? \"Testing Query...\" : \"Test Query & Select Fields\"}\n              </Button>\n            </div>\n          )}\n          \n          {/* Refresh Interval Configuration for JIRA */}\n          {selectedJiraProject && (\n            <div className=\"space-y-2 pt-4 border-t border-border\">\n              <Label className=\"text-sm font-medium text-foreground flex items-center\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Auto-Refresh Interval\n              </Label>\n              <div className=\"flex gap-2\">\n                <div className=\"flex-1\">\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"999\"\n                    placeholder=\"5\"\n                    value={refreshInterval}\n                    onChange={(e) => setRefreshInterval(parseInt(e.target.value) || 5)}\n                    className=\"w-full\"\n                    data-testid=\"input-jira-refresh-interval\"\n                  />\n                </div>\n                <div className=\"w-32\">\n                  <Select value={refreshUnit} onValueChange={setRefreshUnit}>\n                    <SelectTrigger data-testid=\"select-jira-refresh-unit\">\n                      <SelectValue placeholder=\"Unit\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"seconds\">Seconds</SelectItem>\n                      <SelectItem value=\"minutes\">Minutes</SelectItem>\n                      <SelectItem value=\"hours\">Hours</SelectItem>\n                      <SelectItem value=\"days\">Days</SelectItem>\n                      <SelectItem value=\"weeks\">Weeks</SelectItem>\n                      <SelectItem value=\"months\">Months</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Dashboard cards will automatically refresh JIRA data every {refreshInterval} {refreshUnit}.\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {selectedType === \"smax\" && (\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"smaxUrl\">SMAX URL</Label>\n            <Input\n              id=\"smaxUrl\"\n              type=\"url\"\n              placeholder=\"https://your-smax-instance.com\"\n              value={smaxUrl}\n              onChange={(e) => setSmaxUrl(e.target.value)}\n              data-testid=\"input-smax-url\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"smaxUsername\">SMAX Username</Label>\n            <Input\n              id=\"smaxUsername\"\n              type=\"text\"\n              placeholder=\"your.username\"\n              value={smaxUsername}\n              onChange={(e) => setSmaxUsername(e.target.value)}\n              data-testid=\"input-smax-username\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"smaxPassword\">SMAX Password</Label>\n            <Input\n              id=\"smaxPassword\"\n              type=\"password\"\n              placeholder=\"Your password\"\n              value={smaxPassword}\n              onChange={(e) => setSmaxPassword(e.target.value)}\n              data-testid=\"input-smax-password\"\n              required\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Use your SMAX account credentials to connect to the service management platform\n            </p>\n          </div>\n          \n          {smaxUrl.trim() && smaxUsername.trim() && smaxPassword.trim() && (\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleTestDataSource}\n              disabled={isTestingDataSource}\n              className=\"w-full\"\n              data-testid=\"button-test-smax-connection\"\n            >\n              <PlayCircle className=\"w-4 h-4 mr-2\" />\n              {isTestingDataSource ? \"Testing...\" : \"Test SMAX Connection\"}\n            </Button>\n          )}\n          \n          {smaxServices.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"smaxService\">Service/Entity Type</Label>\n              <Select value={selectedSmaxService} onValueChange={setSelectedSmaxService}>\n                <SelectTrigger data-testid=\"select-smax-service\">\n                  <SelectValue placeholder=\"Select a service type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {smaxServices.map((service) => (\n                    <SelectItem key={service.name} value={service.name}>\n                      {service.displayName || service.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          \n          {selectedSmaxService && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"smaxQuery\">SMAX Query Filter</Label>\n              <Textarea\n                id=\"smaxQuery\"\n                placeholder=\"Status='Open' OR Priority='High'\"\n                value={smaxQuery}\n                onChange={(e) => setSmaxQuery(e.target.value)}\n                className=\"h-20\"\n                data-testid=\"textarea-smax-query\"\n              />\n              <div className=\"bg-muted/30 rounded-md p-3 text-sm text-muted-foreground\">\n                <p>• Use SMAX query syntax to filter records</p>\n                <p>• Example: Status='InProgress' AND AssignedTo='John.Doe'</p>\n                <p>• Leave empty to fetch all records of the selected type</p>\n              </div>\n              \n              {/* Test SMAX query to get fields */}\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={async () => {\n                  setIsTestingDataSource(true);\n                  setTestResults(null);\n                  setTestError(null);\n                  \n                  try {\n                    const testData = {\n                      type: \"smax\",\n                      config: { smaxUrl, smaxUsername, smaxPassword, selectedSmaxService, smaxQuery }\n                    };\n                    \n                    const response = await apiRequest(\"POST\", \"/api/data-sources/test\", testData);\n                    const responseData = await response.json();\n                    \n                    // Simulate fetching sample data to show available fields\n                    const sampleFields = [\n                      'Id', 'Title', 'Status', 'Priority', 'AssignedTo', 'RequestedBy',\n                      'Category', 'Subcategory', 'CreationTime', 'LastUpdateTime', 'ClosureTime',\n                      'Description', 'Service', 'ImpactScope', 'Urgency', 'Phase'\n                    ];\n                    \n                    setTestResults({ \n                      ...responseData, \n                      fields: sampleFields,\n                      message: \"SMAX query tested successfully! Select the fields you want to display in your dashboard.\"\n                    });\n                    \n                    toast({\n                      title: \"SMAX query test successful\",\n                      description: \"Select the fields you want to display in your dashboard.\",\n                    });\n                  } catch (error: any) {\n                    const errorMessage = error.message || \"Failed to test SMAX query\";\n                    setTestError(errorMessage);\n                    toast({\n                      title: \"SMAX query test failed\",\n                      description: errorMessage,\n                      variant: \"destructive\",\n                    });\n                  } finally {\n                    setIsTestingDataSource(false);\n                  }\n                }}\n                disabled={isTestingDataSource || !selectedSmaxService}\n                className=\"w-full\"\n                data-testid=\"button-test-smax-query\"\n              >\n                <PlayCircle className=\"w-4 h-4 mr-2\" />\n                {isTestingDataSource ? \"Testing Query...\" : \"Test Query & Select Fields\"}\n              </Button>\n            </div>\n          )}\n          \n          {/* Refresh Interval Configuration for SMAX */}\n          {selectedSmaxService && (\n            <div className=\"space-y-2 pt-4 border-t border-border\">\n              <Label className=\"text-sm font-medium text-foreground flex items-center\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Auto-Refresh Interval\n              </Label>\n              <div className=\"flex gap-2\">\n                <div className=\"flex-1\">\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"999\"\n                    placeholder=\"5\"\n                    value={refreshInterval}\n                    onChange={(e) => setRefreshInterval(parseInt(e.target.value) || 5)}\n                    className=\"w-full\"\n                    data-testid=\"input-smax-refresh-interval\"\n                  />\n                </div>\n                <div className=\"w-32\">\n                  <Select value={refreshUnit} onValueChange={setRefreshUnit}>\n                    <SelectTrigger data-testid=\"select-smax-refresh-unit\">\n                      <SelectValue placeholder=\"Unit\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"seconds\">Seconds</SelectItem>\n                      <SelectItem value=\"minutes\">Minutes</SelectItem>\n                      <SelectItem value=\"hours\">Hours</SelectItem>\n                      <SelectItem value=\"days\">Days</SelectItem>\n                      <SelectItem value=\"weeks\">Weeks</SelectItem>\n                      <SelectItem value=\"months\">Months</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Dashboard cards will automatically refresh SMAX data every {refreshInterval} {refreshUnit}.\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {selectedType === \"scraping\" && (\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"scrapingUrl\">Target URL</Label>\n            <Input\n              id=\"scrapingUrl\"\n              type=\"url\"\n              placeholder=\"https://example.com\"\n              data-testid=\"input-scraping-url\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"scrapingSelectors\">CSS Selectors</Label>\n            <Textarea\n              id=\"scrapingSelectors\"\n              placeholder=\"Enter CSS selectors for elements to extract...\"\n              className=\"h-24\"\n              data-testid=\"textarea-scraping-selectors\"\n            />\n          </div>\n        </div>\n      )}\n\n      {selectedType === \"database\" && (\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dbConnectionString\">Connection String</Label>\n            <Input\n              id=\"dbConnectionString\"\n              type=\"text\"\n              placeholder=\"postgresql://user:password@host:port/database\"\n              data-testid=\"input-db-connection\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dbQuery\">SQL Query</Label>\n            <Textarea\n              id=\"dbQuery\"\n              placeholder=\"SELECT * FROM table_name WHERE condition;\"\n              className=\"h-24\"\n              data-testid=\"textarea-db-query\"\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Test Results Display */}\n      {(testResults || testError) && (\n        <div className=\"space-y-4 p-4 border border-border rounded-lg bg-muted/20\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-medium text-foreground flex items-center\">\n              {testError ? (\n                <AlertCircle className=\"w-5 h-5 text-destructive mr-2\" />\n              ) : (\n                <CheckCircle className=\"w-5 h-5 text-green-600 mr-2\" />\n              )}\n              Test Results\n            </h3>\n          </div>\n\n          {testError && (\n            <div className=\"p-3 bg-destructive/10 rounded border border-destructive/20\">\n              <p className=\"text-sm text-destructive font-medium\">Error:</p>\n              <p className=\"text-sm text-destructive/80 mt-1\">{testError}</p>\n            </div>\n          )}\n\n          {testResults && (\n            <div className=\"space-y-3\">\n              {/* Status Code */}\n              {testResults.statusCode && (\n                <div>\n                  <p className=\"text-sm font-medium text-foreground mb-2\">HTTP Status:</p>\n                  <div className=\"p-3 bg-background rounded border border-border\">\n                    <span className={`inline-flex items-center px-2 py-1 text-xs rounded-md ${\n                      testResults.statusCode >= 200 && testResults.statusCode < 300 \n                        ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300'\n                        : testResults.statusCode >= 400\n                        ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300'  \n                        : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300'\n                    }`}>\n                      {testResults.statusCode}\n                    </span>\n                  </div>\n                </div>\n              )}\n              \n              {/* Raw Response */}\n              <div>\n                <p className=\"text-sm font-medium text-foreground mb-2\">Response:</p>\n                <div className=\"p-3 bg-background rounded border border-border max-h-64 overflow-auto\">\n                  <pre className=\"text-xs text-muted-foreground whitespace-pre-wrap\">\n                    {JSON.stringify(testResults.response, null, 2)}\n                  </pre>\n                </div>\n              </div>\n\n              {/* Parsed Fields with Selection */}\n              {testResults.fields && testResults.fields.length > 0 && (\n                <div>\n                  <p className=\"text-sm font-medium text-foreground mb-2\">\n                    Select Fields to Fetch ({testResults.fields.length} available):\n                  </p>\n                  <div className=\"p-3 bg-background rounded border border-border space-y-3\">\n                    <div className=\"flex items-center gap-2 pb-2 border-b border-border\">\n                      <Checkbox\n                        id=\"select-all-fields\"\n                        checked={selectedFields.length === testResults.fields.length}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedFields([...testResults.fields]);\n                            // Initialize display names for all fields\n                            const newDisplayNames = { ...fieldDisplayNames };\n                            testResults.fields.forEach((field: string) => {\n                              if (!newDisplayNames[field]) {\n                                newDisplayNames[field] = field.split('.').pop() || field;\n                              }\n                            });\n                            setFieldDisplayNames(newDisplayNames);\n                          } else {\n                            setSelectedFields([]);\n                          }\n                        }}\n                        data-testid=\"checkbox-select-all-fields\"\n                      />\n                      <Label htmlFor=\"select-all-fields\" className=\"text-sm font-medium\">\n                        Select All ({selectedFields.length} selected)\n                      </Label>\n                    </div>\n                    <div className=\"space-y-2 max-h-60 overflow-auto\">\n                      {testResults.fields.map((field: string, index: number) => (\n                        <div key={index} className=\"flex items-center gap-2\">\n                          <Checkbox\n                            id={`field-${index}`}\n                            checked={selectedFields.includes(field)}\n                            onCheckedChange={(checked) => {\n                              if (checked) {\n                                setSelectedFields([...selectedFields, field]);\n                                // Initialize display name if not set\n                                if (!fieldDisplayNames[field]) {\n                                  setFieldDisplayNames({\n                                    ...fieldDisplayNames,\n                                    [field]: field.split('.').pop() || field\n                                  });\n                                }\n                              } else {\n                                setSelectedFields(selectedFields.filter(f => f !== field));\n                              }\n                            }}\n                            data-testid={`checkbox-field-${field}`}\n                          />\n                          <div className=\"flex-1 min-w-0\">\n                            <Label\n                              htmlFor={`field-${index}`}\n                              className=\"text-xs font-medium cursor-pointer block truncate\"\n                              title={field}\n                            >\n                              {field}\n                            </Label>\n                            {selectedFields.includes(field) && (\n                              <Input\n                                type=\"text\"\n                                placeholder=\"Display name\"\n                                value={fieldDisplayNames[field] || ''}\n                                onChange={(e) => {\n                                  setFieldDisplayNames({\n                                    ...fieldDisplayNames,\n                                    [field]: e.target.value\n                                  });\n                                }}\n                                className=\"mt-1 h-6 text-xs\"\n                                data-testid={`input-display-name-${field}`}\n                              />\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    {selectedFields.length > 0 && (\n                      <div className=\"pt-2 border-t border-border\">\n                        <p className=\"text-xs text-muted-foreground\">\n                          Selected fields will be used in dashboard cards and charts.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* JSON Structure */}\n              {testResults.structure && (\n                <div>\n                  <p className=\"text-sm font-medium text-foreground mb-2\">JSON Structure:</p>\n                  <div className=\"p-3 bg-background rounded border border-border max-h-64 overflow-auto\">\n                    <pre className=\"text-xs text-muted-foreground whitespace-pre-wrap\">\n                      {JSON.stringify(testResults.structure, null, 2)}\n                    </pre>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"flex space-x-3 pt-4 border-t border-border\">\n        <Button \n          type=\"button\" \n          variant=\"outline\" \n          className=\"flex-1\"\n          onClick={onCancel}\n          data-testid=\"button-cancel-data-source\"\n        >\n          Cancel\n        </Button>\n        <Button \n          type=\"submit\" \n          className=\"flex-1\"\n          disabled={createMutation.isPending || updateMutation.isPending}\n          data-testid=\"button-submit-data-source\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          {dataSource ? \"Update\" : \"Create\"} Data Source\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":42329},"client/src/components/forms/user-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { UserPlus, Save, Search, UserIcon, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface UserFormProps {\n  user?: User | null;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport function UserForm({ user, onSuccess, onCancel }: UserFormProps) {\n  const [username, setUsername] = useState(user?.username || \"\");\n  const [email, setEmail] = useState(user?.email || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(user?.role || \"standard\");\n  const [authMethod, setAuthMethod] = useState(user?.authMethod || \"local\");\n  const [isActive, setIsActive] = useState(user?.isActive ?? true);\n  \n  // LDAP search states\n  const [ldapSearchUsername, setLdapSearchUsername] = useState(\"\");\n  const [ldapSearchStatus, setLdapSearchStatus] = useState<'idle' | 'searching' | 'found' | 'not-found'>('idle');\n  const [ldapUserInfo, setLdapUserInfo] = useState<any>(null);\n  \n  // Check if LDAP is enabled\n  const { data: ldapSettings } = useQuery({\n    queryKey: [\"/api/settings/ldap\"],\n  });\n  \n  const ldapEnabled = ldapSettings?.enabled || false;\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/users\", data),\n    onSuccess: () => {\n      toast({\n        title: \"User created\",\n        description: \"The user has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to create user\",\n        description: \"Please check the user details and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"PUT\", `/api/users/${user?.id}`, data),\n    onSuccess: () => {\n      toast({\n        title: \"User updated\",\n        description: \"The user has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update user\",\n        description: \"Please check the user details and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const searchLdapMutation = useMutation({\n    mutationFn: async (username: string) => {\n      const response = await apiRequest(\"GET\", `/api/auth/search-ldap/${username}`);\n      return response.json();\n    },\n    onMutate: () => {\n      setLdapSearchStatus('searching');\n    },\n    onSuccess: (data: any) => {\n      setLdapSearchStatus('found');\n      setLdapUserInfo(data.user);\n      \n      // Auto-populate form fields\n      if (data.user) {\n        setUsername(data.user.username || \"\");\n        setEmail(data.user.email || \"\");\n      }\n      \n      toast({\n        title: \"User found\",\n        description: `Found user: ${data.user.fullName || data.user.username}`,\n      });\n    },\n    onError: (error: any) => {\n      setLdapSearchStatus('not-found');\n      setLdapUserInfo(null);\n      toast({\n        title: \"User not found\",\n        description: error.message || \"User not found in LDAP directory\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLdapSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!ldapSearchUsername.trim()) {\n      toast({\n        title: \"Validation error\",\n        description: \"Please enter a username to search.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    searchLdapMutation.mutate(ldapSearchUsername);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // For LDAP users, password is not required\n    const isPasswordRequired = authMethod === \"local\" && !user;\n    \n    if (!username || !email || (isPasswordRequired && !password)) {\n      toast({\n        title: \"Validation error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = {\n      username,\n      email,\n      role,\n      authMethod,\n      isActive,\n      ...(password && authMethod === \"local\" && { password }),\n    };\n\n    if (user) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"username\">Username</Label>\n        <Input\n          id=\"username\"\n          type=\"text\"\n          placeholder=\"johndoe\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n          data-testid=\"input-username\"\n          required\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"email\">Email</Label>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"john@example.com\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          data-testid=\"input-email\"\n          required\n        />\n      </div>\n\n      {/* Password field - only show for local auth or editing existing users */}\n      {(authMethod === \"local\" || user) && (\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\">\n            {user ? \"New Password (leave blank to keep current)\" : \"Password\"}\n            {authMethod === \"ldap\" && <span className=\"text-muted-foreground ml-2\">(LDAP users authenticate via LDAP server)</span>}\n          </Label>\n          <Input\n            id=\"password\"\n            type=\"password\"\n            placeholder=\"••••••••\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            data-testid=\"input-password\"\n            required={!user && authMethod === \"local\"}\n            disabled={authMethod === \"ldap\" && !!user}\n          />\n        </div>\n      )}\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"role\">Role</Label>\n        <Select value={role} onValueChange={setRole}>\n          <SelectTrigger data-testid=\"select-role\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"admin\">Administrator</SelectItem>\n            <SelectItem value=\"standard\">Standard User</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"authMethod\">Authentication Method</Label>\n        <Select value={authMethod} onValueChange={(value) => {\n          if (value === \"ldap\" && !ldapEnabled) {\n            toast({\n              title: \"LDAP Disabled\",\n              description: \"LDAP authentication is currently disabled. Please enable it in system settings.\",\n              variant: \"destructive\",\n            });\n            return;\n          }\n          setAuthMethod(value);\n        }}>\n          <SelectTrigger data-testid=\"select-auth-method\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"local\">Local</SelectItem>\n            <SelectItem value=\"ldap\" disabled={!ldapEnabled}>\n              LDAP {!ldapEnabled ? \"(Disabled)\" : \"\"}\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* LDAP User Search */}\n      {/* LDAP Not Enabled Warning */}\n      {authMethod === \"ldap\" && !ldapEnabled && (\n        <div className=\"space-y-4 border border-destructive/50 bg-destructive/10 rounded-lg p-4\">\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"w-4 h-4 text-destructive\" />\n            <Label className=\"text-sm font-medium text-destructive\">LDAP Authentication Disabled</Label>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            LDAP authentication is currently disabled in system settings. Please enable LDAP configuration to use LDAP authentication.\n          </p>\n        </div>\n      )}\n      \n      {authMethod === \"ldap\" && !user && ldapEnabled && (\n        <div className=\"space-y-4 border border-border rounded-lg p-4\">\n          <div className=\"flex items-center space-x-2\">\n            <UserIcon className=\"w-4 h-4 text-primary\" />\n            <Label className=\"text-sm font-medium\">LDAP User Search</Label>\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <div className=\"flex-1\">\n              <Input\n                type=\"text\"\n                placeholder=\"Enter LDAP username...\"\n                value={ldapSearchUsername}\n                onChange={(e) => setLdapSearchUsername(e.target.value)}\n                data-testid=\"input-ldap-search\"\n              />\n            </div>\n            <Button \n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleLdapSearch}\n              disabled={!ldapEnabled || searchLdapMutation.isPending}\n              data-testid=\"button-ldap-search\"\n            >\n              <Search className=\"w-4 h-4 mr-2\" />\n              {searchLdapMutation.isPending ? \"Searching...\" : \"Search\"}\n            </Button>\n          </div>\n          \n          {/* Search Status */}\n          {ldapSearchStatus === 'found' && ldapUserInfo && (\n            <div className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300 p-3 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <UserIcon className=\"w-4 h-4\" />\n                <span className=\"text-sm font-medium\">User Found</span>\n              </div>\n              <div className=\"mt-2 text-sm\">\n                <p><strong>Full Name:</strong> {ldapUserInfo.fullName}</p>\n                <p><strong>Username:</strong> {ldapUserInfo.username}</p>\n                <p><strong>Email:</strong> {ldapUserInfo.email}</p>\n                <p className=\"text-xs text-green-700 dark:text-green-400 mt-1\">\n                  User information has been automatically populated below.\n                </p>\n              </div>\n            </div>\n          )}\n          \n          {ldapSearchStatus === 'not-found' && (\n            <div className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300 p-3 rounded-lg\">\n              <div className=\"text-sm\">\n                <p>User not found in LDAP directory. Please check the username and try again.</p>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"flex items-center justify-between\">\n        <Label htmlFor=\"isActive\">Active User</Label>\n        <Switch\n          id=\"isActive\"\n          checked={isActive}\n          onCheckedChange={setIsActive}\n          data-testid=\"switch-is-active\"\n        />\n      </div>\n\n      <div className=\"flex space-x-3 pt-4 border-t border-border\">\n        <Button \n          type=\"button\" \n          variant=\"outline\" \n          className=\"flex-1\"\n          onClick={onCancel}\n          data-testid=\"button-cancel-user\"\n        >\n          Cancel\n        </Button>\n        <Button \n          type=\"submit\" \n          className=\"flex-1\"\n          disabled={createMutation.isPending || updateMutation.isPending}\n          data-testid=\"button-submit-user\"\n        >\n          {user ? <Save className=\"w-4 h-4 mr-2\" /> : <UserPlus className=\"w-4 h-4 mr-2\" />}\n          {user ? \"Update\" : \"Create\"} User\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":11861},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  BarChart3, \n  Database, \n  Users, \n  Settings, \n  LogOut \n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst navigation = [\n  { name: \"Dashboards\", href: \"/\", icon: BarChart3 },\n  { name: \"Data Sources\", href: \"/data-sources\", icon: Database },\n  { name: \"Users\", href: \"/users\", icon: Users },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 md:hidden\" \n          onClick={onClose}\n          data-testid=\"sidebar-overlay\"\n        />\n      )}\n      \n      {/* Sidebar */}\n      <aside className={cn(\n        \"sidebar-nav fixed md:relative z-30 w-64 h-full bg-card border-r border-border shadow-lg md:shadow-none transition-transform duration-300\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full md:translate-x-0\"\n      )}>\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <BarChart3 className=\"text-primary-foreground w-5 h-5\" />\n            </div>\n            <h1 className=\"text-xl font-bold text-foreground\">DataBoard</h1>\n          </div>\n        </div>\n        \n        <nav className=\"p-4\" data-testid=\"sidebar-navigation\">\n          <ul className=\"space-y-2\">\n            {navigation\n              .filter((item) => {\n                // Hide Settings for non-admin users\n                if (item.name === \"Settings\" && user?.role !== \"admin\") {\n                  return false;\n                }\n                return true;\n              })\n              .map((item) => {\n              const isActive = location === item.href;\n              const Icon = item.icon;\n              \n              return (\n                <li key={item.name}>\n                  <Link href={item.href}>\n                    <a \n                      className={cn(\n                        \"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors\",\n                        isActive \n                          ? \"bg-primary text-primary-foreground\" \n                          : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                      )}\n                      data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                      onClick={() => onClose()}\n                    >\n                      <Icon className=\"w-5 h-5\" />\n                      <span>{item.name}</span>\n                    </a>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n\n        <div className=\"absolute bottom-4 left-4 right-4\">\n          <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-sm font-medium\">\n                {user?.username?.charAt(0).toUpperCase() || \"U\"}\n              </span>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"user-name\">\n                {user?.username || \"Unknown User\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground capitalize\" data-testid=\"user-role\">\n                {user?.role || \"User\"}\n              </p>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={handleLogout}\n              className=\"text-muted-foreground hover:text-foreground p-1\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </aside>\n    </>\n  );\n}\n","size_bytes":4384},"client/src/components/layout/top-bar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Menu, Plus, Sun, Moon } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\ninterface TopBarProps {\n  title: string;\n  onSidebarToggle: () => void;\n  showCreateButton?: boolean;\n  onCreateClick?: () => void;\n  createButtonText?: string;\n}\n\nexport function TopBar({ \n  title, \n  onSidebarToggle, \n  showCreateButton = false, \n  onCreateClick,\n  createButtonText = \"Create\"\n}: TopBarProps) {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    const isDarkMode = document.documentElement.classList.contains('dark');\n    setIsDark(isDarkMode);\n  }, []);\n\n  const toggleTheme = () => {\n    const newIsDark = !isDark;\n    setIsDark(newIsDark);\n    \n    if (newIsDark) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"md:hidden text-muted-foreground hover:text-foreground\"\n            onClick={onSidebarToggle}\n            data-testid=\"button-sidebar-toggle\"\n          >\n            <Menu className=\"w-5 h-5\" />\n          </Button>\n          <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"page-title\">\n            {title}\n          </h2>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {showCreateButton && onCreateClick && (\n            <Button \n              onClick={onCreateClick}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-create\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              {createButtonText}\n            </Button>\n          )}\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"text-muted-foreground hover:text-foreground\"\n            onClick={toggleTheme}\n            data-testid=\"button-theme-toggle\"\n          >\n            {isDark ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2328},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-8 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-2 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2764},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/public-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { DashboardCanvas } from \"@/components/dashboard/dashboard-canvas\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { BarChart3, Shield, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Dashboard } from \"@shared/schema\";\n\nexport default function PublicDashboardPage() {\n  const params = useParams<{ id: string }>();\n  const dashboardId = params.id;\n\n  const { data: dashboard, isLoading, error } = useQuery({\n    queryKey: [`/api/public/dashboards/${dashboardId}`],\n    enabled: !!dashboardId,\n  });\n\n  if (!dashboardId) {\n    return <div className=\"flex-1 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold mb-4\">Invalid Dashboard Link</h2>\n        <p className=\"text-muted-foreground\">The dashboard link appears to be invalid.</p>\n      </div>\n    </div>;\n  }\n\n  if (isLoading) {\n    return <div className=\"flex-1 flex items-center justify-center\">\n      <Card className=\"animate-pulse p-8\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"w-8 h-8 bg-muted rounded\"></div>\n          <div className=\"h-4 bg-muted rounded w-48\"></div>\n        </div>\n      </Card>\n    </div>;\n  }\n\n  if (error || !dashboard) {\n    return <div className=\"flex-1 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <Shield className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h2 className=\"text-2xl font-bold mb-4\">Dashboard Not Available</h2>\n        <p className=\"text-muted-foreground mb-4\">\n          This dashboard is either private or doesn't exist.\n        </p>\n        <Button onClick={() => window.location.href = '/'} variant=\"outline\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Go to Login\n        </Button>\n      </div>\n    </div>;\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden bg-background\">\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"flex items-center p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <BarChart3 className=\"text-primary w-5 h-5\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-semibold\">{(dashboard as Dashboard).name}</h1>\n              {(dashboard as Dashboard).description && (\n                <p className=\"text-sm text-muted-foreground\">{(dashboard as Dashboard).description}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      <DashboardCanvas \n        dashboard={dashboard as Dashboard}\n        onBack={() => {}}\n        isPublic={true}\n      />\n    </div>\n  );\n}","size_bytes":2918},"client/src/pages/public-dashboards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BarChart3, Calendar, User, ArrowLeft, ExternalLink } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Dashboard } from \"@shared/schema\";\n\nexport default function PublicDashboardsPage() {\n  const { data: dashboards = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/public/dashboards\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <BarChart3 className=\"w-16 h-16 text-muted-foreground mx-auto mb-4 animate-pulse\" />\n          <h2 className=\"text-xl font-semibold mb-2\">Loading dashboards...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <BarChart3 className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold mb-4\">Error Loading Dashboards</h2>\n          <p className=\"text-muted-foreground mb-4\">\n            Unable to load public dashboards. Please try again later.\n          </p>\n          <Button onClick={() => window.location.reload()} variant=\"outline\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"text-primary w-6 h-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold\">Public Dashboards</h1>\n                <p className=\"text-muted-foreground\">Explore publicly available data visualizations</p>\n              </div>\n            </div>\n            <Link href=\"/login\">\n              <Button variant=\"outline\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Login\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8\">\n        {dashboards.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <BarChart3 className=\"w-24 h-24 text-muted-foreground mx-auto mb-6\" />\n            <h2 className=\"text-2xl font-bold mb-4\">No Public Dashboards</h2>\n            <p className=\"text-muted-foreground max-w-md mx-auto\">\n              There are currently no public dashboards available to view. \n              Check back later or contact an administrator to make dashboards public.\n            </p>\n          </div>\n        ) : (\n          <>\n            <div className=\"mb-8\">\n              <h2 className=\"text-xl font-semibold mb-2\">\n                Available Dashboards ({(dashboards as Dashboard[]).length})\n              </h2>\n              <p className=\"text-muted-foreground\">\n                Click on any dashboard to explore its data visualizations\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {(dashboards as Dashboard[]).map((dashboard: Dashboard) => (\n                <Link key={dashboard.id} href={`/public/dashboard/${dashboard.id}`}>\n                  <Card className=\"h-full hover:shadow-md transition-shadow cursor-pointer group\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1 min-w-0\">\n                          <CardTitle className=\"text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2\">\n                            {dashboard.name}\n                          </CardTitle>\n                          {dashboard.description && (\n                            <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                              {dashboard.description}\n                            </p>\n                          )}\n                        </div>\n                        <ExternalLink className=\"w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors flex-shrink-0 ml-2 mt-1\" />\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center space-x-1\">\n                            <User className=\"w-3 h-3\" />\n                            <span>Public</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Calendar className=\"w-3 h-3\" />\n                            <span>\n                              {new Date(dashboard.updatedAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":5628},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Set up PostgreSQL database and create database schema\n[x] 3. Restart the workflow to see if the project is working\n[x] 4. Fix data source endpoint to fetch real API data\n[x] 5. Fix React rendering errors with nested objects\n[x] 6. Verify the project is working using the feedback tool\n[x] 7. Fix LDAP toggle behavior to require test and save process\n[x] 8. Remove automatic creation of testuser@example.com user on startup\n[x] 9. Review JIRA integration and identify critical security/reliability issues\n[x] 10. Enhance JIRA integration to fetch saved filters after project selection\n[x] 11. Fix public dashboard authentication issue preventing card visibility\n[x] 12. Migration from Replit Agent to Replit environment completed successfully","size_bytes":785},"server/mail.ts":{"content":"import nodemailer from \"nodemailer\";\nimport { storage } from \"./storage\";\nimport type { MailSettings } from \"@shared/schema\";\n\ninterface MailConfig {\n  host: string;\n  port: number;\n  secure: boolean;\n  auth: {\n    user: string;\n    pass: string;\n  };\n  from: string;\n  enabled: boolean;\n}\n\nexport async function getMailSettings(): Promise<MailConfig | null> {\n  const dbSettings = await storage.getMailSettings();\n  if (!dbSettings || !dbSettings.enabled) {\n    return null;\n  }\n  \n  // Transform database format to expected interface format\n  return {\n    host: dbSettings.host,\n    port: dbSettings.port,\n    secure: dbSettings.secure,\n    auth: {\n      user: dbSettings.authUser,\n      pass: dbSettings.authPass,\n    },\n    from: dbSettings.fromAddress,\n    enabled: dbSettings.enabled,\n  };\n}\n\nexport async function sendTestEmail(config: MailConfig, testEmail: string): Promise<boolean> {\n  if (!config.enabled) {\n    throw new Error(\"Mail service is not enabled\");\n  }\n\n  const transporter = nodemailer.createTransport({\n    host: config.host,\n    port: config.port,\n    secure: config.secure, // true for 465, false for other ports\n    auth: {\n      user: config.auth.user,\n      pass: config.auth.pass,\n    },\n  });\n\n  try {\n    // Verify connection configuration\n    await transporter.verify();\n\n    // Send test email\n    const info = await transporter.sendMail({\n      from: config.from,\n      to: testEmail,\n      subject: \"DataBoard Test Email\",\n      text: `This is a test email from DataBoard to verify your email configuration is working correctly.\\n\\nSent at: ${new Date().toISOString()}`,\n      html: `\n        <h2>DataBoard Test Email</h2>\n        <p>This is a test email to verify your email configuration is working correctly.</p>\n        <p><strong>Configuration details:</strong></p>\n        <ul>\n          <li>SMTP Host: ${config.host}</li>\n          <li>Port: ${config.port}</li>\n          <li>Secure: ${config.secure ? 'Yes' : 'No'}</li>\n          <li>From Address: ${config.from}</li>\n        </ul>\n        <p><em>Sent at: ${new Date().toISOString()}</em></p>\n        <hr>\n        <small>This email was sent by DataBoard</small>\n      `,\n    });\n\n    console.log(\"Test email sent:\", info.messageId);\n    return true;\n  } catch (error) {\n    console.error(\"Failed to send test email:\", error);\n    throw error;\n  }\n}\n\nexport async function sendPasswordResetEmail(userEmail: string, token: string): Promise<boolean> {\n  const config = await getMailSettings();\n  \n  if (!config?.enabled) {\n    console.log(`Password reset email would be sent to ${userEmail} with token: ${token}`);\n    console.log(`Reset link: http://localhost:5000/password-reset?token=${token}`);\n    return false; // Email not configured, but don't throw error\n  }\n\n  const transporter = nodemailer.createTransport({\n    host: config.host,\n    port: config.port,\n    secure: config.secure,\n    auth: {\n      user: config.auth.user,\n      pass: config.auth.pass,\n    },\n  });\n\n  try {\n    const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:5000'}/password-reset?token=${token}`;\n    \n    const info = await transporter.sendMail({\n      from: config.from,\n      to: userEmail,\n      subject: \"DataBoard Password Reset Request\",\n      text: `You have requested to reset your password for DataBoard.\\n\\nClick the following link to reset your password (link expires in 30 minutes):\\n${resetUrl}\\n\\nIf you did not request this password reset, please ignore this email.\\n\\n`,\n      html: `\n        <div style=\"max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif;\">\n          <h2 style=\"color: #333;\">DataBoard Password Reset</h2>\n          <p>You have requested to reset your password for DataBoard.</p>\n          <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <p style=\"margin: 0; font-weight: bold;\">Click the button below to reset your password:</p>\n            <p style=\"margin: 20px 0;\">\n              <a href=\"${resetUrl}\" style=\"background-color: #007bff; color: white; text-decoration: none; padding: 12px 24px; border-radius: 6px; display: inline-block;\">Reset Password</a>\n            </p>\n            <p style=\"margin: 0; font-size: 14px; color: #666;\">\n              <strong>Important:</strong> This link will expire in 30 minutes and can only be used once.\n            </p>\n          </div>\n          <p style=\"font-size: 14px; color: #666;\">\n            If the button doesn't work, copy and paste this URL into your browser:<br>\n            <a href=\"${resetUrl}\" style=\"color: #007bff;\">${resetUrl}</a>\n          </p>\n          <hr style=\"border: none; border-top: 1px solid #eee; margin: 30px 0;\">\n          <p style=\"font-size: 12px; color: #888;\">\n            If you did not request this password reset, please ignore this email. Your account remains secure.\n          </p>\n        </div>\n      `,\n    });\n\n    console.log(\"Password reset email sent:\", info.messageId);\n    return true;\n  } catch (error) {\n    console.error(\"Failed to send password reset email:\", error);\n    throw error;\n  }\n}","size_bytes":5084},"client/src/pages/password-reset-request.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { BarChart3, ArrowLeft, CheckCircle, Mail } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function PasswordResetRequest() {\n  const [email, setEmail] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await apiRequest(\"POST\", \"/api/auth/password-reset-request\", { email });\n      \n      setIsSuccess(true);\n      toast({\n        title: \"Password reset email sent\",\n        description: \"Please check your email for password reset instructions.\",\n      });\n    } catch (error) {\n      console.error(\"Password reset request error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send password reset email. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isSuccess) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-2xl\">\n          <CardHeader className=\"text-center pb-8\">\n            <div className=\"w-16 h-16 bg-green-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"text-white w-8 h-8\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Check Your Email</h1>\n            <p className=\"text-muted-foreground mt-2\">A password reset email has been sent to you.</p>\n          </CardHeader>\n          \n          <CardContent className=\"text-center space-y-6\">\n            <div className=\"p-4 bg-muted/30 rounded-lg\">\n              <Mail className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                Check your inbox and click the password reset link to continue.\n                The link will expire in 30 minutes.\n              </p>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <p className=\"text-sm text-muted-foreground\">\n                Didn't receive the email? Check your spam folder.\n              </p>\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsSuccess(false)}\n                className=\"w-full\"\n                data-testid=\"button-try-again\"\n              >\n                Try Another Email\n              </Button>\n            </div>\n\n            <div className=\"pt-4 border-t\">\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" className=\"w-full\" data-testid=\"button-back-login\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Login\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl\">\n        <CardHeader className=\"text-center pb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <BarChart3 className=\"text-primary-foreground w-8 h-8\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Reset Your Password</h1>\n          <p className=\"text-muted-foreground mt-2\">Enter your email address and we'll send you a password reset link</p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-sm font-medium text-foreground\">\n                Email Address\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-email\"\n                required\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n              disabled={isLoading}\n              data-testid=\"button-send-reset\"\n            >\n              {isLoading ? \"Sending...\" : \"Send Password Reset Email\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 pt-6 border-t text-center\">\n            <Link href=\"/login\">\n              <Button variant=\"ghost\" className=\"w-full\" data-testid=\"button-back-login\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Login\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5284},"client/src/pages/password-reset.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { BarChart3, ArrowLeft, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function PasswordReset() {\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [isTokenValid, setIsTokenValid] = useState<boolean | null>(null);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Extract token from URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const token = urlParams.get(\"token\");\n\n  useEffect(() => {\n    if (!token) {\n      setIsTokenValid(false);\n      return;\n    }\n\n    // Verify token validity\n    const verifyToken = async () => {\n      try {\n        await apiRequest(\"GET\", `/api/auth/verify-reset-token?token=${token}`);\n        setIsTokenValid(true);\n      } catch (error) {\n        setIsTokenValid(false);\n        toast({\n          title: \"Invalid or expired link\",\n          description: \"This password reset link is invalid or has expired.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    verifyToken();\n  }, [token, toast]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (password !== confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        description: \"Please make sure both passwords are the same.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await apiRequest(\"POST\", \"/api/auth/password-reset\", { token, password });\n      \n      setIsSuccess(true);\n      toast({\n        title: \"Password reset successful\",\n        description: \"Your password has been updated successfully.\",\n      });\n      \n      // Redirect to login after 3 seconds\n      setTimeout(() => {\n        setLocation(\"/login\");\n      }, 3000);\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to reset password. The link may have expired.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isTokenValid === false || !token) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-2xl\">\n          <CardHeader className=\"text-center pb-8\">\n            <div className=\"w-16 h-16 bg-red-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <AlertCircle className=\"text-white w-8 h-8\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Invalid Link</h1>\n            <p className=\"text-muted-foreground mt-2\">This password reset link is invalid or has expired</p>\n          </CardHeader>\n          \n          <CardContent className=\"text-center space-y-6\">\n            <p className=\"text-sm text-muted-foreground\">\n              Password reset links expire after 30 minutes for security reasons.\n            </p>\n            \n            <div className=\"space-y-3\">\n              <Link href=\"/password-reset-request\">\n                <Button className=\"w-full\" data-testid=\"button-request-new\">\n                  Request New Password Reset\n                </Button>\n              </Link>\n              <Link href=\"/login\">\n                <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-back-login\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Login\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isSuccess) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-2xl\">\n          <CardHeader className=\"text-center pb-8\">\n            <div className=\"w-16 h-16 bg-green-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"text-white w-8 h-8\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Password Reset Successful</h1>\n            <p className=\"text-muted-foreground mt-2\">Your password has been updated successfully</p>\n          </CardHeader>\n          \n          <CardContent className=\"text-center space-y-6\">\n            <p className=\"text-sm text-muted-foreground\">\n              You will be redirected to the login page shortly.\n            </p>\n            \n            <Link href=\"/login\">\n              <Button className=\"w-full\" data-testid=\"button-login-now\">\n                Login Now\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isTokenValid === null) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-2xl\">\n          <CardContent className=\"text-center py-12\">\n            <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Verifying password reset link...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl\">\n        <CardHeader className=\"text-center pb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <BarChart3 className=\"text-primary-foreground w-8 h-8\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Create New Password</h1>\n          <p className=\"text-muted-foreground mt-2\">Enter your new password below</p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-foreground\">\n                New Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter new password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-password\"\n                required\n                minLength={6}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-foreground\">\n                Confirm New Password\n              </Label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                placeholder=\"Confirm new password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-confirm-password\"\n                required\n                minLength={6}\n              />\n            </div>\n            \n            <div className=\"text-xs text-muted-foreground\">\n              Password must be at least 6 characters long.\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n              disabled={isLoading}\n              data-testid=\"button-reset-password\"\n            >\n              {isLoading ? \"Updating Password...\" : \"Update Password\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8400}},"version":1}